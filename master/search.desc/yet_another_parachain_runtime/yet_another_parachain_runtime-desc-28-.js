searchState.loadedDescShard("yet_another_parachain_runtime", 28, "Notification service\nClosed a substream with the given node. Always matches a …\nOpened a substream with the given node with the given …\nReceived one or more messages from the given node using …\nRole that the peer sent to us during the handshake, with …\nThe protocol name as a dynamically allocated string.\nPossible failures occurring in the context of sending an …\nIdentifier of a peer of the network.\nType implementing <code>PeerStore</code>.\nThe protocol name transmitted on the wire.\nThe providers for <code>Key</code> were found. Multiple such events can …\n<code>GET_PROVIDERS</code> query failed and no providers for <code>Key</code> were …\nThe public key of a node’s identity keypair.\nThe DHT received a put record request.\nDescription of a reputation adjustment for a node.\nError in a request.\nType representing request-response protocol-related …\nBitmask of the roles that a node fulfills.\nA result of signing a message with a network identity. …\nAn error occured while registering as a content provider …\nSuccessfully started providing the given key.\nThe protocol name as a static string.\nThe request timed out before a response was received.\nTry to connect to the peer.\nThe remote supports none of the requested protocols.\nThe value was found.\nThe requested record has not been found in the DHT.\nThe record has been successfully inserted into the DHT.\nAn error has occurred while putting a record into the DHT.\nConnect to unreserved peers and allow unreserved peers to …\nAdds an address known to a node.\nAdds an address for a node.\nAdd peers to a peer set.\nAdds a <code>PeerId</code> and its <code>Multiaddr</code> as reserved for a sync …\nAdds a <code>PeerId</code> and its <code>Multiaddr</code> as reserved.\nReturns the set containing all flags.\nMake sure an important block is propagated to peers.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nCreate Bitswap server.\nCreate Bitswap server.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nThe actual signature made for the message signed.\nMake a copy of the object so it can be shared between …\nInstruct <code>Notifications</code> to close substream for <code>peer</code>.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nDisconnect from unreserved peers and deny new unreserved …\nDeterministically derive a new secret from this <code>Keypair</code>, …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nDisconnect from a node as soon as possible.\nDiscovery mechanisms of Substrate.\nReturns an empty set of flags.\nCreate a new, empty multiaddress.\nEncode the public key into a protobuf structure for …\nSubstrate network possible errors.\nNetwork event types. These are not the part of the …\nReturns a stream containing the events that happen on the …\nReturns the local external addresses.\nReturns the local external addresses.\nStart finding closest peers to the target.\nStart finding closest peerst to the target peer ID in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nDecode a private key from a protobuf structure and parse …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate a new Ed25519 keypair.\nStart getting the list of providers for <code>key</code> on the DHT.\nStart getting a value from the DHT.\nStart getting a value from the DHT.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nDoes this role represents a client that does not …\nReturns <code>true</code> if no flags are currently stored.\nDoes this role represents a client that holds full chain …\nReturns <code>true</code> for <code>ObservedRole::Light</code>.\nDoes this role represents a client that does not hold full …\nReturns the components of this multiaddress.\nReturn a <code>KeyType</code> of the <code>Keypair</code>.\nReturn a <code>KeyType</code> of the <code>PublicKey</code>.\nReturns the listening addresses (without trailing <code>/p2p/</code> …\nReturns the listener addresses (without trailing <code>/p2p/</code> …\nReturns the list of addresses we are listening on.\nReturns the local Peer ID.\nReturns the local Peer ID.\nReturns the local <code>PeerId</code>.\nGet message sink of the peer.\nGet handle to <code>NetworkService</code> of the <code>NetworkBackend</code>.\nGet handle to <code>NetworkService</code> of the <code>NetworkBackend</code>.\nInformation about the networking, for diagnostic purposes.\nGet the network state.\nGet network state.\nGet network state.\nCreate new <code>NetworkBackend</code>.\nCreates a new key from the bytes of the input.\nCreate new <code>Signature</code>.\nCreates the network service.\nCreate new <code>NotificationMetrics</code>.\nInform the network service about new best imported block.\nPerform one action on the network.\nGet next event from the <code>Notifications</code> event stream.\nReturns the complement of this set of flags.\nCreate notification protocol configuration and an …\nCreate notification protocol configuration for <code>protocol</code>.\nCreate notification protocol configuration.\nReturns the number of peers we’re connected to.\nTotal number of connected peers.\nInstruct <code>Notifications</code> to open a new substream for <code>peer</code>.\n<code>PeerInfoBehaviour</code> is implementation of <code>NetworkBehaviour</code> …\nGet peer reputation.\nAttempt to get peer role.\n<code>PeerStore</code> manages peer reputations and provides connection …\nCreate <code>PeerStore</code>.\nCreate <code>PeerStore</code>.\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nGet protocol name of the <code>NotificationService</code>.\nProtocol Controller. Generic implementation of peer …\nGet protocol name.\nGet the public key of this keypair.\nThe public key derived from the network identity that …\nAdds an address component to the end of this multiaddr.\nStart putting the record to <code>peers</code>.\nStart putting a value in the DHT.\nStart putting a value in the DHT.\nReturns a future that resolves when the <code>NotificationSender</code> …\nReason for reputation change.\nRegister metrics that are used by the notification …\nRegister received notification to Prometheus.\nRegister sent notification to Prometheus.\nRegister closed substream to Prometheus.\nRegister opened substream to Prometheus.\nRemoves the specified flags in-place.\nRemove peers from a peer set.\nRemoves a <code>PeerId</code> from the list of reserved peers for a …\nRemoves a <code>PeerId</code> from the list of reserved peers.\nReport a given peer as either beneficial (+) or costly (-) …\nSends a single targeted request to a specific peer. On …\nCreate request-response protocol configuration.\nCreate request-response protocol configuration.\nCreate request-response protocol configuration.\nCollection of request-response protocols.\nGet the list of reserved peers.\nGet the list of reserved peers.\nStart <code>NetworkBackend</code> event loop.\nStart <code>Litep2pNetworkBackend</code> event loop.\nStart <code>NetworkBackend</code> event loop.\nRun the network.\nConsumes this slots reservation and actually queues the …\nSend asynchronous <code>notification</code> to <code>peer</code>, allowing sender to …\nSend an asynchronous <code>notification</code> to to the peer …\nSend synchronous <code>notification</code> to <code>peer</code>.\nSend synchronous <code>notification</code> to the peer associated with …\nMain entry point of the sc-network crate.\nReturn a <code>NetworkService</code> that can be shared through the …\nInserts or removes the specified flags depending on the …\nSet authorized_only flag.\nSet authorized peers.\nGet access to the <code>SetConfig</code> of the notification protocol.\nSet handshake for the notification protocol replacing the …\nSets the timeout for inbound and outbound requests.\nSets the reserved set of a protocol to the given set of …\nNotifies the sync service to try and sync the given block …\nSign a message using the private key of this keypair, …\nCreate a signature for a message with a given network …\nSigns the message with the <code>KeyPair</code> that defines the local …\nRegister this node as a provider for <code>key</code> on the DHT.\nVariation of <code>request</code> which starts a request whose response …\nHigh-level network status information.\nHigh-level network status information.\nDeregister this node as a provider for <code>key</code> on the DHT.\nStore a record in the DHT memory store.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the number of peers in the sync peer set we’re …\nConvert the <code>PublicKey</code> into the corresponding <code>PeerId</code>.\nEncode a private key as protobuf structure.\nCopies the bytes of the key into a new vector.\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nToggles the specified flags in-place.\nReturns the total number of bytes received so far.\nThe total number of bytes received.\nReturns the total number of bytes sent so far.\nThe total number of bytes sent.\nTransport that serves as a common ground for all …\nDecode a public key from a protobuf structure, e.g. read …\nNon-blocking variant of <code>set_handshake()</code> that attempts to …\n<code>sc-network</code> type definitions\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\n<code>sc-network</code> utilities\nReputation delta.\nVerify signature using peer’s public key.\nVerify a signature for a message using this public key, …\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nSets the upper bound for the number of concurrent inbound …\nSets the timeout for inbound and outbound requests.\nConcerned protocol and associated message.\nIf the negotiation didn’t use the main name of the …\nThe concerned protocol. Each protocol uses a different …\nThe concerned protocol. Each protocol uses a different …\nReceived handshake.\nNode we opened the substream with.\nNode we closed the substream with.\nNode we received the message from.\nRole of the remote.\n<code>FIND_NODE</code> query yielded closest peers with their …\nThe closest peers to the target <code>PeerId</code> have not been found.\nDefault value for Kademlia replication factor which  …\nWe discovered a peer and currenlty have it’s addresses …\nImplementation of <code>NetworkBehaviour</code> that discovers the …\n<code>DiscoveryBehaviour</code> configuration.\nEvent generated by the <code>DiscoveryBehaviour</code>.\nThe DHT yielded no more providers for the key (…\nThe DHT yielded results for the providers request.\nProviders for the requested key were not found in the DHT.\nThe DHT received a put record request.\nStarted a random Kademlia query.\nStarting providing a key failed.\nThe content provider for a given key was successfully …\nA peer connected to this node for whom no listen address …\nThe DHT yielded results for the record request.\nThe record requested was not found in the DHT.\nThe record with a given key was successfully inserted into …\nInserting a value into the DHT failed.\nAdds a hard-coded address for the given peer, that never …\nAdd a self-reported address of a remote peer to the …\nShould non-global addresses be inserted to the DHT?\nShould private IPv4/IPv6 addresses be reported?\nCan the given <code>Multiaddr</code> be put into the DHT?\nSet the number of active connections at which we pause …\nStart finding the closest peers to the given <code>PeerId</code>.\nCreate a <code>DiscoveryBehaviour</code> from this config.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet content providers for <code>key</code> from the DHT.\nStart fetching a record from the DHT.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the total size in bytes of all the records in the …\nReturns the list of nodes that we know exist in the …\nCreate a default configuration with the given public key.\nReturns the number of nodes in each Kademlia kbucket for …\nReturns the number of records in the Kademlia record …\nPuts a record into the DHT on the provided <code>peers</code>\nStart putting a record into the DHT. Other nodes can later …\nRegister as a content provider on the DHT for <code>key</code>.\nDeregister as a content provider on the DHT for <code>key</code>.\nStore a record in the Kademlia record store.\nRequire iterative Kademlia DHT queries to use disjoint …\nWhether the discovery behaviour should periodically …\nAdd discovery via Kademlia for the given protocol.\nSets Kademlia replication factor.\nShould MDNS discovery be supported?\nSet custom nodes which never expire, e.g. bootstrap or …\nThe network addresses are invalid because they don’t …\nChannel closed.\nClient error\nConnection closed.\nThe same bootnode (based on address) is registered with …\nThe same request-response protocol has been registered …\nContains the error value\nError type for the network.\nIo error\nLitep2p error.\nContains the success value\nPeer does not exist.\nPrometheus metrics error.\nResult type alias for the network.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe address of the bootnode.\nThe invalid addresses.\nThe first peer id that was found for the bootnode.\nName of the protocol registered multiple times.\nThe second peer id that was found for the bootnode.\nTransport used.\nFound closest peers to the target <code>PeerId</code>. With libp2p also …\nClosest peers to the target <code>PeerId</code> has not been found.\nEvent generated by a DHT.\nEvents generated by DHT as a response to get_value and …\nType for events generated by networking layer.\n<code>GET_PROVIDERS</code> query finished and won’t yield any more …\nClosed a substream with the given node. Always matches a …\nOpened a substream with the given node with the given …\nReceived one or more messages from the given node using …\nThe providers for <code>Key</code> were found. Multiple such events can …\n<code>GET_PROVIDERS</code> query failed and no providers for <code>Key</code> were …\nThe DHT received a put record request.\nAn error occured while registering as a content provider …\nSuccessfully started providing the given key.\nThe value was found.\nThe requested record has not been found in the DHT.\nThe record has been successfully inserted into the DHT.\nAn error has occurred while putting a record into the DHT.\nConcerned protocol and associated message.\nIf the negotiation didn’t use the main name of the …\nThe concerned protocol. Each protocol uses a different …\nThe concerned protocol. Each protocol uses a different …\nReceived handshake.\nNode we opened the substream with.\nNode we closed the substream with.\nNode we received the message from.\nRole of the remote.\nLess data provided than indicated by length.\nInvalid multiaddress.\nInvalid protocol specification.\nFailed to decode unsigned varint.\nIterator over <code>Multiaddr</code> <code>Protocol</code>s.\nContains the “port” to contact. Similar to TCP or UDP, …\n<code>Multiaddr</code> type used in Substrate. Converted to libp2p’s …\nError when parsing a <code>Multiaddr</code> from string.\nOther error emitted when parsing into the wrapped type.\n<code>Protocol</code> describes all possible multiaddress protocols.\nUnknown protocol numeric id.\nUnknown protocol string identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEasy way for a user to create a <code>Multiaddr</code>.\nThe socket comes from a dialer.\nWe are dialing the given address.\nPart of the <code>NetworkState</code> struct. Unstable.\nThe socket comes from a listener.\nWe are listening.\nReturns general information about the networking.\nPart of the <code>NetworkState</code> struct. Unstable.\nPart of the <code>NetworkState</code> struct. Unstable.\nPart of the <code>NetworkState</code> struct. Unstable.\nList of node we’re connected to.\nHow we are connected to the node.\nList of addresses the node knows it can be reached as.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of addresses known for this node.\nList of addresses known for this node.\nLatest ping duration with this node.\nLatest ping duration with this node, if we were ever …\nList of addresses the node is currently listening on.\nList of node that we know of but that we’re not …\nPeerId of the local node.\nState of the peerset manager.\nNode information, as provided by the node itself. Can be …\nNode information, as provided by the node itself, if we …\nLocal address of the connection.\nAddress data is sent back to.\nUtility struct for tracking external addresses. The data …\nWe have obtained identity information from a peer, …\nGives access to the information about a node.\nImplementation of <code>NetworkBehaviour</code> that holds information …\nEvent that can be emitted by the behaviour.\nAdd an external address.\nReturns the latest version information we know of.\nReturns the endpoint of an established connection to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the latest ping time we know of for this node. <code>None</code>…\nBuilds a new <code>PeerInfoBehaviour</code>.\nBorrows <code>self</code> and returns a struct giving access to the …\nRemove an external address.\nInformation about the peer.\nId of the peer that has been identified.\nWe don’t accept nodes whose reputation is under this …\nLog target for this file.\nWorker part of <code>PeerStoreHandle</code>\nActual implementation of peer reputations and connection …\nTrait providing peer reputation management and connection …\nTrait describing the required functionality from a <code>Peerset</code> …\nAdd known peer.\nDisconnect peer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet <code>PeerStoreHandle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the peer is banned.\nCreate a new peer store from the list of bootnodes.\nGet candidates with highest reputations for initiating …\nGet peer reputation.\nGet peer role, if available.\nRegister a protocol handle to disconnect peers whose …\nReport peer disconnection for reputation adjustment.\nAdjust peer reputation.\nDrive the <code>PeerStore</code>, decaying reputation values over time …\nSet peer role.\nEquivalent to <code>Connect</code> for the peer corresponding to this …\nRequest to open a connection to the given peer. From the …\nDrop the connection to the given peer, or cancel the …\nOpaque identifier for an incoming connection. Allocated by …\nLog target for this file.\nMessage that is sent by <code>ProtocolController</code> to <code>Notifications</code>…\nConfiguration for a set of nodes for a specific protocol.\nWorker side of <code>ProtocolHandle</code> responsible for all the …\nShared handle to <code>ProtocolController</code>. Distributed around …\nEquivalent to <code>Drop</code> for the peer corresponding to this …\n<code>Notifications</code> protocol index. For historical reasons it’…\nAdds a new reserved peer. <code>ProtocolController</code> will make an …\nDisconnect peer. You should remove the <code>PeerId</code> from the …\nNotify that connection was dropped (either refused or …\nReturns the argument unchanged.\nConst conversion function for initialization of hardcoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMaximum number of incoming links to peers.\nNotify about incoming connection. <code>ProtocolController</code> will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct new <code>ProtocolController</code>.\nPerform one action. Returns <code>true</code> if it should be called …\nMaximum number of outgoing links to peers.\nDemotes reserved peer to non-reserved. Does not disconnect …\nLists of nodes we should always be connected to.\nIf true, we only accept nodes in …\nGet the list of reserved peers.\nDrive <code>ProtocolController</code>. This function returns when all …\nSets whether or not <code>ProtocolController</code> only has …\nSet reserved peers to the new set.\nPeer to connect to.\nPeer to disconnect from.\nSet id to connect on.\nSet id to disconnect on.\nThe configuration for a <code>Behaviour</code> protocol.\nThe connection closed before a response was received.\nThe connection closed before a response could be send.\nThe request could not be sent because a dialing attempt …\nA protocol has been specified multiple times.\nEvent generated by the <code>RequestResponsesBehaviour</code>.\nWhen sending a request, what to do on a disconnected …\nJust fail if the destination is not yet connected.\nPossible failures occurring in the context of receiving an …\nA remote sent a request and either we have successfully …\nThe ID of an inbound request.\nA single request received by a peer on a request-response …\nAn IO failure happened on an outbound stream.\nAn IO failure happened on an inbound stream.\nProblem on the network.\nPossible failures occurring in the context of sending an …\nThe ID of an outbound request.\nResponse for an incoming request to be send by a request …\nConfiguration for a single request-response protocol.\nError when registering a protocol.\nA request protocol handler issued reputation changes for …\nError in a request.\nA request initiated using …\nImplementation of <code>NetworkBehaviour</code> that provides support …\nError when processing a request sent by a remote.\nThe local peer failed to respond to an inbound request\nThe request timed out before a response was received.\nThe inbound request timed out, either while reading the …\nTry to connect to the peer.\nThe remote supports none of the requested protocols.\nThe local peer supports none of the protocols requested by …\nFallback on the wire protocol names to support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nChannel on which the networking service will send incoming …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum allowed size, in bytes, of a request.\nMaximum allowed size, in bytes, of a response.\nName of the protocol on the wire. Should be something like …\nCreates a new behaviour. Must be passed a list of …\nRequest sent by the remote. Will always be smaller than …\nWho sent the request.\nChannel to send back the response.\nReputation changes accrued while handling the request. To …\nDuration after which emitted requests are considered timed …\nThe payload of the response.\nInitiates sending a request.\nIf provided, the <code>oneshot::Sender</code> will be notified when the …\nReputation changes.\nDuration the request took.\nPeer which has emitted the request.\nPeer that we send a request to.\nPeer whose reputation needs to be adjust.\nName of the protocol in question.\nName of the protocol in question.\nWhether handling the request was successful or …\nResult of the request.\nThe connection closed before a response was received.\nThe connection closed before a response could be send.\nAn error during decoding of key material.\nThe request could not be sent because a dialing attempt …\nPossible failures occurring in the context of receiving an …\nAn IO failure happened on an outbound stream.\nAn IO failure happened on an inbound stream.\nIdentity keypair of a node.\nProblem on the network.\nSubstrate network service. Handles network IO and manages …\nMain network worker. Must be polled in order for the …\nNotification metrics.\nA <code>NotificationSender</code> allows for sending notifications to a …\nReserved slot in the notifications buffer, ready to accept …\nSink connected directly to the node background task. …\nPossible failures occurring in the context of sending an …\nThe public key of a node’s identity keypair.\nError when processing a request sent by a remote.\nThe local peer failed to respond to an inbound request\nThe request timed out before a response was received.\nThe inbound request timed out, either while reading the …\nThe remote supports none of the requested protocols.\nThe local peer supports none of the protocols requested by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet reference to metrics.\nCreate new <code>NotificationsSink</code>. NOTE: only used for testing …\nReturns the <code>PeerId</code> the sink is connected to.\nWait until the remote is ready to accept a notification.\nSends a notification to the peer.\nSignature-related code\nTraits defined by <code>sc-network</code>.\nKeypair.\nLitep2p public key.\nLitep2p keypair.\nLibp2p public key.\nLibp2p keypair.\nPublic key.\nA result of signing a message with a network identity. …\nAn error during signing of a message.\nThe actual signature made for the message signed.\nProtobuf-encode <code>PublicKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate ed25519 keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet <code>Keypair</code>’s public key.\nThe public key derived from the network identity that …\nGet <code>PeerId</code> of the <code>PublicKey</code>.\nAccept inbound substream.\nProtocol name hasn’t been registered.\nTrait defining the behavior of a bandwidth sink.\nBitswap config.\nThe notification receiver has been closed, usually because …\nSubstream direction.\nSubstream opened by the remote node.\nThe (opaque) key of a record.\nMessage sink for peers.\n<code>Multiaddr</code> type used in Substrate. Converted to libp2p’s …\nNetworking backend.\nProvides ability to announce blocks to the network.\nProvides access to the networking DHT.\nProvides access to network-level event stream.\nProvides low-level API for manipulating network peers.\nProvides ability to send network requests.\nSupertrait defining the services provided by <code>NetworkBackend</code>…\nType implementing <code>NetworkService</code> for the networking …\nSigner with network identity\nTrait for providing information about the local network …\nOverview status of the network.\nProvides high-level status information about network.\nProvides an ability to set a fork sync request for a …\nTrait defining the required functionality from a …\nEvents received by the protocol from <code>Notifications</code>.\nType representing notification protocol-related …\nNotification was received from the substream.\nA <code>NotificationSender</code> allows for sending notifications to a …\nError returned by the notification sink.\nReserved slot in the notifications buffer, ready to accept …\nNotification service\nSubstream was closed.\nRemote identified by <code>PeerId</code> opened a substream and sent …\nSubstream opened by the local node.\nIdentifier of a peer of the network.\nTrait defining required functionality from <code>PeerStore</code>.\nType implementing <code>PeerStore</code>.\nA record stored in the DHT.\nReject inbound substream.\nTrait defining the required functionality from a …\nType representing request-response protocol-related …\nAn error during signing of a message.\nValidate inbound substream.\nSubstream acceptance result.\nConnect to unreserved peers and allow unreserved peers to …\nAdds an address known to a node.\nAdd peers to a peer set.\nAdds a <code>PeerId</code> and its <code>Multiaddr</code> as reserved for a sync …\nMake sure an important block is propagated to peers.\nCreate Bitswap server.\nMake a copy of the object so it can be shared between …\nInstruct <code>Notifications</code> to close substream for <code>peer</code>.\nDisconnect from unreserved peers and deny new unreserved …\nDisconnect from a node as soon as possible.\nReturns a stream containing the events that happen on the …\nThe expiration time as measured by a local, monotonic …\nReturns the local external addresses.\nStart finding closest peers to the target.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStart getting the list of providers for <code>key</code> on the DHT.\nStart getting a value from the DHT.\nGet handle to <code>PeerStore</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the direction inbound.\nKey of the record.\nReturns the listening addresses (without trailing <code>/p2p/</code> …\nReturns the local Peer ID.\nGet message sink of the peer.\nGet handle to <code>NetworkService</code> of the <code>NetworkBackend</code>.\nGet the network state.\nCreate new <code>NetworkBackend</code>.\nInform the network service about new best imported block.\nGet next event from the <code>Notifications</code> event stream.\nCreate notification protocol configuration and an …\nTotal number of connected peers.\nInstruct <code>Notifications</code> to open a new substream for <code>peer</code>.\nGet peer reputation.\nAttempt to get peer role.\nCreate <code>PeerStore</code>.\nGet protocol name of the <code>NotificationService</code>.\nGet protocol name.\nGet protocol name.\nThe (original) publisher of the record.\nStart putting the record to <code>peers</code>.\nStart putting a value in the DHT.\nReturns a future that resolves when the <code>NotificationSender</code> …\nRegister metrics that are used by the notification …\nRemove peers from a peer set.\nRemoves a <code>PeerId</code> from the list of reserved peers for a …\nReport a given peer as either beneficial (+) or costly (-) …\nSends a single targeted request to a specific peer. On …\nCreate request-response protocol configuration.\nGet the list of reserved peers.\nStart running <code>PeerStore</code> event loop.\nStart <code>NetworkBackend</code> event loop.\nConsumes this slots reservation and actually queues the …\nSend asynchronous <code>notification</code> to <code>peer</code>, allowing sender to …\nSend an asynchronous <code>notification</code> to to the peer …\nSend synchronous <code>notification</code> to <code>peer</code>.\nSend synchronous <code>notification</code> to the peer associated with …\nSet authorized_only flag.\nSet authorized peers.\nGet access to the <code>SetConfig</code> of the notification protocol.\nSet handshake for the notification protocol replacing the …\nSets the reserved set of a protocol to the given set of …\nNotifies the sync service to try and sync the given block …\nSigns the message with the <code>KeyPair</code> that defines the local …\nRegister this node as a provider for <code>key</code> on the DHT.\nVariation of <code>request</code> which starts a request whose response …\nHigh-level network status information.\nDeregister this node as a provider for <code>key</code> on the DHT.\nStore a record in the DHT memory store.\nReturns the number of peers in the sync peer set we’re …\nThe total number of bytes received.\nThe total number of bytes sent.\nGet the number of bytes received.\nGet the number of bytes sent.\nNon-blocking variant of <code>set_handshake()</code> that attempts to …\nValue of the record.\nVerify signature using peer’s public key.\nIs the substream inbound or outbound.\nReceived handshake.\nReceived handshake.\nNegotiated fallback.\nReceived notification.\nPeer ID.\nPeer ID.\nPeer Id.\nPeer ID.\n<code>oneshot::Sender</code> for sending validation result back to …\nAllows obtaining the average bandwidth of the streams.\nBuilds the transport that serves as a common ground for …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the total number of bytes that have been …\nReturns the total number of bytes that have been uploaded …\nThe protocol name as a dynamically allocated string.\nThe protocol name transmitted on the wire.\nThe protocol name as a static string.\nWrapper around <code>LinkedHashSet</code> with bounded growth.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInsert element into the set.\nCreates a stream that returns a new value every <code>duration</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LruHashSet</code> with the given (exclusive) limit.\nMinimum Requirements for a Hash within Networking\nNetwork packet message types. These get serialized and put …\nAbstract interfaces and data structures related to network …\nA unique ID of a request.\nThird-party authority.\nActual authority.\nFull node.\nRegular full node.\nLight node.\nRole that the peer sent to us during the handshake, with …\nRole of the local node.\nBitmask of the roles that a node fulfills.\nFull block download and verification.\nDownload blocks and the latest state.\nSync operation mode.\nWarp sync - verify authority set transitions and the …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is <code>Self::Warp</code>.\nReturns <code>true</code> if <code>self</code> is <code>Self::LightState</code>.\nNetwork packet message types. These get serialized and put …\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nAnnouncement summary used for debug logging.\nEnumerate in ascending order (from child to parent).\nInclude block body.\nLatest best block.\nAnnounce a new complete block on the network.\nHandshake sent when we open a block announces substream.\nNode roles bitmask.\nType alias for using the BlockData type using block type …\nType alias for using the block request type using block …\nType alias for using the BlockResponse type using block …\nBlock state in the chain.\nEnumerate in descending order (from parent to canonical …\nBlock enumeration direction.\nIdentifies starting point of a block sequence.\nInclude block header.\nStart with given hash.\nInclude indexed transactions for a block.\nInclude a justification for the block.\nInclude block message queue.\nBlock is not part of the best chain.\nStart with given block number.\nInclude block receipt.\nReturns the set containing all flags.\nBest block hash.\nBest block number.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nBlock data for the requested sequence.\nBlock body if requested.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nData associated with this block announcement, e.g. a …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nSequence direction.\nReturns an empty set of flags.\nBits of block data to request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart from this block.\nDecodes attributes, encoded with the <code>encode_to_be_u32()</code> …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGeneric types.\nGenesis block hash.\nBlock header hash.\nBlock header if requested.\nNew block header.\nUnique request id.\nId of a request this response was made for.\nBlock body indexed transactions if requested.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nJustification if requested.\nJustifications if requested.\nMaximum number of blocks to return. An implementation …\nBlock message queue if requested.\nReturns the complement of this set of flags.\nBlock receipt if requested.\nRemoves the specified flags in-place.\nRoles of the node.\nInserts or removes the specified flags depending on the …\nBlock state. TODO: Remove <code>Option</code> and custom encoding when …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nEncodes attributes as big endian u32, compatible with …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAnnounce a new complete block on the network.\nBlock data sent in the response.\nRequest block data from a peer.\nResponse to <code>BlockRequest</code>\nIdentifies starting point of a block sequence.\nStart with given hash.\nStart with given block number.\nBlock data for the requested sequence.\nBlock body if requested.\nData associated with this block announcement, e.g. a …\nSequence direction.\nBits of block data to request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart from this block.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nBlock header hash.\nBlock header if requested.\nNew block header.\nUnique request id.\nId of a request this response was made for.\nBlock body indexed transactions if requested.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJustification if requested.\nJustifications if requested.\nMaximum number of blocks to return. An implementation …\nBlock message queue if requested.\nBlock receipt if requested.\nBlock state. TODO: Remove <code>Option</code> and custom encoding when …\nDescription of a reputation adjustment for a node.\nReason for reputation change.\nReputation delta.\nRequested broadcast.\nMessage should be ignored.\nA gossip message validator that discards all messages.\nRequested broadcast to all peers.\nWraps around an implementation of the <code>Network</code> trait and …\nThe reason for sending out the message.\nAbstraction over a network.\nPeriodic rebroadcast of all messages to all peers.\nMessage should be processed, but not propagated.\nMessage should be stored and propagated under given topic.\nAbstraction over the syncing subsystem.\nTopic stream message with sender.\nMessage validation result.\nValidates consensus messages.\nValidation context. Allows reacting to incoming messages …\nNotify everyone we’re connected to that we have the …\nBroadcast a message to all peers that have not received it …\nBroadcast all messages with given topic to peers that do …\nBroadcast all messages with given topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMulticast a message to all peers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage data.\nProduce a closure for filtering egress messages.\nProduce a closure for validating messages on a given topic.\nGet data of valid, incoming messages for a topic (but …\nCreate a new instance.\nNew peer is connected.\nNew connection is dropped.\nRegisters a message without propagating it to any peers. …\nSend addressed message to a peer.\nSend addressed message to the given peers. The message is …\nSend all messages with given topic to a peer.\nSend all messages with given topic to a peer.\nSender if available.\nConsume <code>GossipEngine</code> and return the notification service.\nValidate consensus message.\nHelpers for outgoing and incoming light client requests.\nGenerates a <code>RequestResponseProtocolConfig</code> for the light …\nFor incoming light client requests. Helper for incoming …\nHandler for incoming light client requests from a remote …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LightClientRequestHandler</code>.\nRun <code>LightClientRequestHandler</code>.\nHandler for statements. Call <code>StatementHandler::run</code> to …\nPrototype for a <code>StatementHandler</code>.\nFuture resolving to statement import result.\nA set of statements.\nTurns the prototype into the actual handler.\nConfiguration of the statement protocol\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nPropagate one statement.\nTurns the <code>StatementHandler</code> into a future that should run …\nMaximum allowed size for a statement notification.\nEnumerate in ascending order (from child to parent).\nWaiting for peers to connect.\nBlock data sent in the response.\nRequest block data from a peer.\nResponse to <code>BlockRequest</code>\nWarp sync is complete.\nEnumerate in descending order (from parent to canonical …\nBlock enumeration direction.\nActively catching up with the chain.\nDownloading block history.\nDownloading state data.\nDownloading target block.\nDownloading and verifying grandpa warp proofs.\nInitial sync is complete, keep-up sync is active.\nAll blocks are downloaded and are being imported.\nImporting state.\nA key value state.\nPeer that the syncing implementation is tracking connected.\nPeer that the syncing implementation was tracking …\nA key-value pair.\nRequest storage data from a peer.\nSyncing-related events that other protocols can subscribe …\nReported sync state.\nSyncing status and statistics.\nProvides high-level status of syncing.\nHandle for communicating with <code>SyncingEngine</code> asynchronously\nWarp sync configuration as accepted by <code>WarpSync</code>.\nReported warp sync phase.\nReported warp sync progress.\nStandard warp sync for the chain.\nSkip downloading proofs and use provided header of the …\nString value of the enum field names used in the ProtoBuf …\nTarget sync block number.\nBlock header hash.\nBlock relay protocol related definitions.\nNested message and enum types in <code>BlockRequest</code>.\nHelper for handling (i.e. answering) block requests from a …\nBlock data for the requested sequence.\nBlock body if requested.\nSet to true when there are no more keys to return.\nReturns the enum value of <code>direction</code>, or the default if the …\nSequence direction. If missing, should be interpreted as …\n<code>SyncingEngine</code> is the actor responsible for syncing …\nA collection of keys-values states. Only populated if …\nA collection of keys-values.\nSubscribe to syncing-related events.\nGet syncing event stream.\nBits of block data to request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart from this block.\nConverts an <code>i32</code> to a <code>Direction</code>, or <code>None</code> if <code>value</code> is not a …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates an enum from field names used in the ProtoBuf …\nBlock header hash.\nBlock header if requested.\nIndexed block body if requestd.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if justification should be treated as present but …\nAre we actively catching up with the chain?\nReturns <code>true</code> if <code>value</code> is a variant of <code>Direction</code>.\nJustification if requested.\nJustifications if requested. Unlike the field for a single …\nMaximum number of blocks to return. An implementation …\nBlock message queue if requested.\nContains mock implementations of <code>ChainSync</code> and ‘…\nCreate new handle\nif ‘true’ indicates that response should contain raw …\nGet the number of active peers.\nGet the number of peers known to <code>SyncingEngine</code> (both full …\nGet the number of downloaded blocks.\nNumber of peers participating in syncing.\nGet the number of sync requests.\nNotify the <code>SyncingEngine</code> that a block has been finalized.\nGet peer information.\nEstimated download percentage.\nIf <code>no_proof</code> is false in request, this contains proof nodes.\nNumber of blocks queued for import\nBlock receipt if requested.\nRequest a justification for the given block from the …\n<code>SyncingEngine</code>-related service code\nSets <code>direction</code> to the provided enum value.\nConfigure an explicit fork sync request.\nStart from this key. Multiple keys used for nested state …\nCurrent global sync state.\nHelper for handling (i.e. answering) state requests from a …\nRoot of for this level, empty length bytes if top level.\nState sync status in progress, if any.\nGet high-level view of the syncing status.\nGet high-level view of the syncing status.\nGet sync status\n<code>SyncingStrategy</code> defines an interface …\nIndicate to the receiver that we support multiple …\nTotal bytes downloaded so far.\nCommon syncing types.\nHelper for handling (i.e. answering) grandpa warp sync …\nWarp sync in progress, if any.\nThe client side stub to download blocks from peers. This …\nBlock relay specific params for network creation, …\nErrors returned by …\nThe serving side of the block relay protocol. It runs a …\nFailed to decode the response bytes.\nFailed to extract the blocks from the decoded bytes.\nParses the protocol specific response to retrieve the …\nPerforms the protocol specific sequence to fetch the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProtocol name used by block downloader.\nStarts the protocol processing.\nStart from this block.\nStart with given hash.\nStart with given block number.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe full block server implementation of <code>BlockServer</code>. It …\nThe full block downloader implementation of `…\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a <code>RequestResponseProtocolConfig</code> for the block …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRequestHandler</code>.\nA collection of blocks being downloaded.\nBlock data with origin.\nThe Block Message from the wire\nClear everything.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInsert a set of blocks into collection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a set of block hashes that require a header …\nCreate a new instance.\nThe peer, we received this from\nGet a valid chain of blocks ordered in descending order …\nThe “major syncing” metric.\nPeer information\nMake sure an important block is propagated to peers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds a set of blocks known to this peer.\nPush a block announce validation.\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>download_blocks</code> …\nCreate an <code>Expectation</code> for mocking the <code>protocol_name</code> method\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;self</code> argument and …\nCall this <code>Expectation</code> as if it were the real method.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a reference to a constant value from the <code>Expectation</code>\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>add_known_address</code> …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>add_reserved_peer</code> …\nCreate an <code>Expectation</code> for mocking the <code>blocks_processed</code> …\nCreate an <code>Expectation</code> for mocking the <code>deny_unreserved_peers</code>…\nCreate an <code>Expectation</code> for mocking the <code>disconnect_peer</code> …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>peer_reputation</code> …\nCreate an <code>Expectation</code> for mocking the <code>peer_role</code> method\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>remove_reserved_peer</code> …\nCreate an <code>Expectation</code> for mocking the <code>report_peer</code> method\nCreate an <code>Expectation</code> for mocking the <code>request</code> method\nCreate an <code>Expectation</code> for mocking the <code>request_justification</code>…\nCreate an <code>Expectation</code> for mocking the <code>reserved_peers</code> method\nCreate an <code>Expectation</code> for mocking the <code>set_authorized_only</code> …\nCreate an <code>Expectation</code> for mocking the <code>set_authorized_peers</code> …\nCreate an <code>Expectation</code> for mocking the <code>set_reserved_peers</code> …\nCreate an <code>Expectation</code> for mocking the <code>set_sync_fork_request</code>…\nCreate an <code>Expectation</code> for mocking the <code>start_request</code> method\nCreate an <code>Expectation</code> for mocking the <code>sync_num_connected</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nCall <code>NetworkPeers::disconnect_peer()</code>\nNetwork-related services required by <code>sc-network-sync</code>\nHandle that is (temporarily) passed to <code>ChainSync</code> so it can …\nNetwork service provider for <code>ChainSync</code>\nCall <code>NetworkPeers::report_peer()</code>\nCall <code>NetworkRequest::start_request()</code>\nCommands that <code>ChainSync</code> wishes to send to <code>NetworkService</code>\nDisconnect peer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet handle to talk to the provider\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>NetworkServiceProvider</code>\nCreate new service handle\nReport peer\nRun the <code>NetworkServiceProvider</code>\nSend request to peer\nHandle for communicating with <code>SyncingEngine</code> asynchronously\nCommands send to <code>SyncingEngine</code>\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nHandler for incoming block requests from a remote peer.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a <code>RequestResponseProtocolConfig</code> for the state …\nCalls <code>U::from(self)</code>.\nCreate a new <code>StateRequestHandler</code>.\nRun <code>StateRequestHandler</code>.\nDrop stale request.\nPeer misbehaved. Disconnect, report it and cancel any …\nStrategy finished. Nothing to do, this is handled by …\nImport blocks.\nImport justifications.\nStart request to peer.\nThe key identifying a specific strategy for responses …\nSyncing strategy for syncing engine to use\nGet actions that should be performed by the owner on the …\nNotify syncing state machine that a new sync peer has …\nContains the state of the chain synchronization process\nClear extra justification requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the syncing action has completed.\nInstantiate opaque strategy key.\nGet the total number of downloaded blocks.\nGet the number of peers known to the syncing strategy.\nGet an estimate of the number of parallel sync requests.\nNotify a syncing strategy that a block has been finalized.\nA batch of blocks that have been processed, with or …\nProcess generic response.\nReport a justification import (successful or not).\nSubmit a validated block announcement.\n<code>PolkadotSyncingStrategy</code> is a proxy between …\nNotify that a sync peer has disconnected.\nRequest extra justification.\nConfigure an explicit fork sync request in case external …\nState sync strategy.\nState sync support.\nReturns the current sync status.\nInform sync about a new best imported block.\nWarp syncing strategy. Bootstraps chain by downloading …\nThe main data structure which contains all the state for a …\nSync operation mode.\nFull block download and verification.\nDownload blocks and the latest state.\nStrategy key used by chain sync.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nValidate that the given <code>blocks</code> are correct. Returns the …\nSkip state proof download and verification.\nDownload indexed transactions for recent blocks.\nProxy to specific syncing strategies used in Polkadot.\nSyncing configuration containing data for …\nBlock downloader\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of blocks to request.\nThe number of parallel downloads to guard against slow …\nPrometheus metrics registry.\nNumber of peers that need to be connected before warp sync …\nSyncing mode.\nInitialize a new syncing strategy.\nProceed with the next strategy if the active one finished.\nProtocol name used to send out state requests\nStrategy key used by state sync.\nSyncing strategy that downloads and imports a recent state …\nGet actions that should be performed.\nNotify that a new peer has connected.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCheck if state sync has succeeded.\nCreate a new instance.\nCreate a new instance with a custom state sync provider.\nA batch of blocks have been processed, with or without …\nProcess state response.\nSubmit a validated block announcement.\nNotify that a peer has disconnected.\nReturns the current sync status.\nBad state chunk.\nContinue downloading.\nState is complete and ready for import.\nImport state chunk result.\nState sync state machine.\nReported state download progress.\nGeneric state sync provider. Used for mocking in tests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nValidate and import a state response.\nValidate and import a state response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the state is complete.\nCheck if the state is complete.\nCreate a new instance.\nProduce next state request.\nProduce next state request.\nEstimated download percentage.\nCurrent state sync phase.\nReturns state sync estimated progress.\nReturns state sync estimated progress.\nTotal state size in bytes downloaded so far.\nReturns target block hash.\nReturns target block hash.\nReturns target block number.\nReturns target block number.\nA list of Grandpa authorities with associated weights.\nWaiting for peers to connect.\nTarget finality is proved.\nWarp sync is complete.\nDownloading block history.\nDownloading state data.\nDownloading target block.\nDownloading and verifying grandpa warp proofs.\nScale-encoded warp sync proof response.\nImporting state.\nProof is valid, but the target was not reached.\nStrategy key used by warp sync.\nThe monotonic identifier of a GRANDPA set of authorities.\nProof verification result.\nWarp sync request\nWarp sync state machine. Accumulates warp proofs and state.\nWarp sync configuration as accepted by <code>WarpSync</code>.\nReported warp sync phase.\nReported warp sync progress.\nWarp sync backend. Handles retrieving and verifying warp …\nStandard warp sync for the chain.\nSkip downloading proofs and use provided header of the …\nGet actions that should be performed by the owner on …\nNotify that a new peer has connected.\nStart collecting proofs from this block.\nGet current list of authorities. This is supposed to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate proof starting at given block hash. The proof is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance. When passing a warp sync provider …\nGet the number of peers known to warp sync.\nProcess (target) block response.\nSubmit a validated block announcement.\nProcess warp proof response.\nEstimated download percentage.\nReturns warp sync estimated progress (stage, bytes …\nNotify that a peer has disconnected.\nReturns the current sync status.\nTake the result of finished warp sync, returning <code>None</code> if …\nTotal bytes downloaded so far.\nVerify warp proof against current set of authorities.\nA peer did not behave as expected and should be reported.\nActively catching up with the chain.\nInfo about a peer’s known state (both full and light).\nInitial sync is complete, keep-up sync is active.\nAll blocks are downloaded and are being imported.\nPeer that the syncing implementation is tracking connected.\nPeer that the syncing implementation was tracking …\nThe sync status of a peer we are trying to sync with\nSyncing-related events that other protocols can subscribe …\nReported sync state.\nSyncing status and statistics.\nProvides high-level status of syncing.\nTheir best block hash.\nPeer best block hash\nTheir best block number.\nPeer best block number\nTarget sync block number.\nSubscribe to syncing-related events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of peers participating in syncing.\nNumber of blocks queued for import\nRoles\nCurrent global sync state.\nState sync status in progress, if any.\nGet high-level view of the syncing status.\nWarp sync in progress, if any.\nHandler for incoming grandpa warp sync requests from a …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerates a <code>RequestResponseProtocolConfig</code> for the grandpa …\nCalls <code>U::from(self)</code>.\nCreate a new <code>RequestHandler</code>.\nRun <code>RequestHandler</code>.\nA set of transactions.\nHandler for transactions. Call <code>TransactionsHandler::run</code> to …\nControls the behaviour of a <code>TransactionsHandler</code> it is …\nPrototype for a <code>TransactionsHandler</code>.\nTurns the prototype into the actual handler. Returns a …\nConfiguration of the transaction protocol\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nYou must call when new a transaction is imported by the …\nPropagate one transaction.\nYou may call this when new transactions are imported by …\nTurns the <code>TransactionsHandler</code> into a future that should …\nTransaction is invalid.\nDummy implementation of the <code>TransactionPool</code> trait for a …\nTransaction is good but already known by the transaction …\nTransaction is good and not yet known.\nTransaction import was not performed.\nResult of the transaction import.\nFuture resolving to transaction import result.\nTransaction pool interface\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet hash of transaction.\nImport a transaction into the pool.\nCalls <code>U::from(self)</code>.\nNotify the pool about transactions broadcast.\nGet transaction by hash.\nGet transactions from the pool that are ready to be …\nIdentifier of a peer of the network.\nEasy way for a user to create a <code>Multiaddr</code>.\n<code>Multihash</code> implemenattion used by substrate. Currently it’…\nThe (opaque) key of a record.\nA record either received by the given peer or retrieved …\nA record stored in the DHT.\nAn error during signing of a message.\nThe expiration time as measured by a local, monotonic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the record is expired w.r.t. the given …\nKey of the record.\nCreates a new record for insertion into the DHT.\nThe peer from whom the record was received. <code>None</code> if the …\nThe (original) publisher of the record.\nValue of the record.\nDefault <code>Multihash</code> implementations. Only hashes used by …\nError generated when converting to <code>Code</code>.\nIdentity hasher.\nInvalid multihash size.\nCatch-all for other errors emitted when converting <code>u64</code> …\nSHA-256 (32-byte hash size).\nThe multihash code is not supported.\nMultihash code.\nCalculate digest using this <code>Code</code>’s hashing algorithm.\nMultihash digest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a multihash from bytes.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bytes of a multihash.\nWraps the digest in a multihash.\nNetworkProvider provides <code>OffchainWorkers</code> with all …\nSpecial type that implements <code>OffchainStorage</code>.\nOffchain DB that implements <code>DbExternalities</code> for …\nThe offchain worker api.\nOptions for <code>OffchainWorkers</code>\nAn offchain workers manager.\nPersistent storage prefix used by the Offchain Worker API …\nCallback to create custom <code>Extension</code>s that should be …\nEnable http requests from offchain workers?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the node running as validator?\nProvides access to the keystore.\nProvides access to network information.\nCreates new <code>OffchainWorkers</code>.\nCreate new instance of Offchain DB.\nProvides access to the offchain database.\nStarts the off-chain task for given block header.\nStarts the off-chain task for given block number.\nRun the offchain workers on every block import.\nProvides access to the runtime api.\nProvides access to the transaction pool.\nThe reason why proposing a block ended.\nAuthorship metrics.\nOptional shareable link to basic authorship metrics.\nNo transactions are allowed in the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReport the reason why the proposing ended.\nSignifies whether a potentially unsafe RPC should be …\nAllows calling every RPCs.\nGenerates random integers as subscription ID.\nGenerates random strings of length <code>len</code> as subscription ID.\nTask executor that is being used by RPC subscriptions.\nDenies only potentially unsafe RPCs.\nSubstrate block-author/full-node API.\nSubstrate blockchain API.\nReturns <code>Ok(())</code> if the RPCs considered unsafe are safe to …\nImplementation of the <code>DevApiServer</code> trait providing debug …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubstrate mixnet API.\nCreate a new random string provider.\nSubstrate offchain API.\nSubstrate state API.\nSubstrate statement store API.\nSubstrate system API.\nTesting utils used by the RPC tests.\nJSON-RPC helpers.\nAuthoring API\nClient implementation for the <code>AuthorApi</code> RPC API.\nServer trait implementation for the <code>AuthorApi</code> RPC API.\nAuthoring RPC module errors.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nChecks if the keystore has private keys for the given …\nChecks if the keystore has private keys for the given …\nChecks if the keystore has private keys for the given …\nChecks if the keystore has private keys for the given …\nChecks if the keystore has private keys for the given …\nChecks if the keystore has private keys for the given …\nExtrinsic helpers for author RPC module.\nInsert a key into the keystore.\nInsert a key into the keystore.\nInsert a key into the keystore.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCreate new instance of Authoring API.\nReturns all pending extrinsics, potentially grouped by …\nReturns all pending extrinsics, potentially grouped by …\nReturns all pending extrinsics, potentially grouped by …\nRemove given extrinsic from the pool and temporarily ban …\nRemove given extrinsic from the pool and temporarily ban …\nRemove given extrinsic from the pool and temporarily ban …\nGenerate new session keys and returns the corresponding …\nGenerate new session keys and returns the corresponding …\nGenerate new session keys and returns the corresponding …\nSubmit hex-encoded extrinsic for inclusion in block.\nSubmit hex-encoded extrinsic for inclusion in block.\nSubmit hex-encoded extrinsic for inclusion in block.\nSubmit an extrinsic to watch.\nSubmit an extrinsic to watch.\nSubmit an extrinsic to watch.\nIncorrect extrinsic format.\nKey type ID has an unknown format.\nClient error.\nContains the error value\nAuthor RPC errors.\nInvalid session keys encoding.\nSome random issue with the key store. Shouldn’t happen.\nContains the success value\nTransaction pool error,\nAuthor RPC Result type.\nCall to an unsafe RPC was denied.\nVerification error\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nRaw extrinsic bytes.\nRPC Extrinsic or hash\nThe hash of the extrinsic.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nChain API with subscriptions support.\nClient implementation for the <code>ChainApi</code> RPC API.\nServer trait implementation for the <code>ChainApi</code> RPC API.\nGet header and body of a block.\nGet header and body of a block.\nGet header and body of a block.\nGet hash of the n-th block in the canon chain.\nGet hash of the n-th block in the canon chain.\nGet hash of the n-th block in the canon chain.\nError helpers for Chain RPC module.\nGet hash of the last finalized block in the canon chain.\nGet hash of the last finalized block in the canon chain.\nGet hash of the last finalized block in the canon chain.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet header.\nGet header.\nGet header.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCreate new state API that works on full node.\nAll head subscription.\nAll head subscription.\nAll head subscription.\nFinalized head subscription.\nFinalized head subscription.\nFinalized head subscription.\nNew head subscription.\nNew head subscription.\nNew head subscription.\nClient error.\nContains the error value\nChain RPC errors.\nContains the success value\nOther error type.\nChain RPC Result type.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStatistics of a block returned by the <code>dev_getBlockStats</code> …\nThe Dev API. All methods are unsafe.\nServer trait implementation for the <code>DevApi</code> RPC API.\nLength of the block in bytes.\nReexecute the specified <code>block_hash</code> and gather statistics …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCreate a new Dev API.\nNumber of extrinsics in the block.\nThe length in bytes of the storage proof after compaction.\nThe length in bytes of the storage proof produced by …\nMixnet API.\nServer trait implementation for the <code>MixnetApi</code> RPC API.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCreate a new mixnet API instance.\nSubmit encoded extrinsic over the mixnet for inclusion in …\nOffchain API\nClient implementation for the <code>OffchainApi</code> RPC API.\nServer trait implementation for the <code>OffchainApi</code> RPC API.\nClear offchain local storage under given key and prefix.\nClear offchain local storage under given key and prefix.\nClear offchain local storage under given key and prefix.\nOffchain RPC errors.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet offchain local storage under given key and prefix.\nGet offchain local storage under given key and prefix.\nGet offchain local storage under given key and prefix.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCreate new instance of Offchain API.\nSet offchain local storage under given key and prefix.\nSet offchain local storage under given key and prefix.\nSet offchain local storage under given key and prefix.\nContains the error value\nOffchain RPC errors.\nContains the success value\nOffchain RPC Result type.\nUnavailable storage kind error.\nCall to an unsafe RPC was denied.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nChild state API with subscriptions support.\nClient implementation for the <code>ChildStateApi</code> RPC API.\nServer trait implementation for the <code>ChildStateApi</code> RPC API.\nChild state backend API.\nClient error.\nState RPC errors.\nProvided block range couldn’t be resolved to a list of …\nProvided count exceeds maximum value.\nReadProof struct returned by the RPC\nState API with subscriptions support.\nClient implementation for the <code>StateApi</code> RPC API.\nServer trait implementation for the <code>StateApi</code> RPC API.\nState backend API.\nCall to an unsafe RPC was denied.\nBlock hash used to generate the proof\nCall runtime method at given block.\nCall a method from the runtime API at a block’s state.\nCall a method from the runtime API at a block’s state.\nCall a method from the runtime API at a block’s state.\nState RPC errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSubstrate state API helpers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nReturns the runtime metadata as an opaque blob.\nReturns the runtime metadata as an opaque blob.\nReturns the runtime metadata as an opaque blob.\nReturns the runtime metadata as an opaque blob.\nCreate new state API that works on full node.\nA proof used to prove that storage entries are included in …\nQuery historical storage entries (by key) starting from a …\nQuery historical storage entries (by key) starting from a …\nQuery historical storage entries (by key) starting from a …\nQuery historical storage entries (by key) starting from a …\nQuery storage entries (by key) starting at block hash …\nQuery storage entries (by key) at a block hash given as …\nQuery storage entries (by key) at a block hash given as …\nQuery storage entries (by key) at a block hash given as …\nReturns proof of storage for a child key entries at a …\nReturns proof of storage for child key entries at a …\nReturns proof of storage for child key entries at a …\nReturns proof of storage for child key entries at a …\nReturns proof of storage entries at a specific block’s …\nReturns proof of storage entries at a specific block’s …\nReturns proof of storage entries at a specific block’s …\nReturns proof of storage entries at a specific block’s …\nGet the runtime version.\nGet the runtime version.\nGet the runtime version.\nGet the runtime version.\nReturns a child storage entry at a specific block’s …\nReturns a storage entry at a specific block’s state.\nReturns a child storage entry at a specific block’s …\nReturns a storage entry at a specific block’s state.\nReturns a child storage entry at a specific block’s …\nReturns a child storage entry at a specific block’s …\nReturns a storage entry at a specific block’s state.\nReturns a storage entry at a specific block’s state.\nReturns child storage entries at a specific block’s …\nReturns child storage entries for multiple keys at a …\nReturns child storage entries for multiple keys at a …\nReturns child storage entries for multiple keys at a …\nReturns the hash of a child storage entry at a block’s …\nReturns the hash of a storage entry at a block’s state.\nReturns the hash of a child storage entry at a block’s …\nReturns the hash of a storage entry at a block’s state.\nReturns the hash of a child storage entry at a block’s …\nReturns the hash of a child storage entry at a block’s …\nReturns the hash of a storage entry at a block’s state.\nReturns the hash of a storage entry at a block’s state.\nReturns the keys with prefix from a child storage, leave …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix from a child storage, leave …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix from a child storage, leave …\nReturns the keys with prefix from a child storage, leave …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix from a child storage with …\nReturns the keys with prefix with pagination support.\nReturns the keys with prefix from a child storage with …\nReturns the keys with prefix with pagination support. Up …\nReturns the keys with prefix from a child storage with …\nReturns the keys with prefix from a child storage with …\nReturns the keys with prefix with pagination support. Up …\nReturns the keys with prefix with pagination support. Up …\nReturns the keys with prefix along with their values, …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix, leave empty to get all the …\nReturns the keys with prefix, leave empty to get all the …\nReturns the size of a storage entry at a block’s state.\nReturns the size of a child storage entry at a block’s …\nReturns the size of a storage entry at a block’s state.\nReturns the size of a child storage entry at a block’s …\nReturns the size of a child storage entry at a block’s …\nReturns the size of a child storage entry at a block’s …\nReturns the size of a storage entry at a block’s state.\nReturns the size of a storage entry at a block’s state.\nNew runtime version subscription\nNew runtime version subscription\nNew runtime version subscription\nNew runtime version subscription\nNew storage subscription\nNew storage subscription\nNew storage subscription\nNew storage subscription\nTrace storage changes for block\nThe <code>traceBlock</code> RPC provides a way to trace the …\nRe-execute the given block with the tracing targets given …\nThe <code>traceBlock</code> RPC provides a way to trace the …\nThe <code>traceBlock</code> RPC provides a way to trace the …\nDetails of the error message.\nBeginning of the block range.\nMaximum allowed value\nEnd of the block range.\nProvided value\nClient error.\nContains the error value\nState RPC errors.\nProvided block range couldn’t be resolved to a list of …\nProvided count exceeds maximum value.\nContains the success value\nState RPC Result type.\nCall to an unsafe RPC was denied.\nDetails of the error message.\nBeginning of the block range.\nMaximum allowed value\nEnd of the block range.\nProvided value\nReadProof struct returned by the RPC\nBlock hash used to generate the proof\nA proof used to prove that storage entries are included in …\nStatement RPC errors.\nServer trait implementation for the <code>StatementApi</code> RPC API.\nStatement store API\nStatement store internal error.\nCall to an unsafe RPC was denied.\nReturn the data of all known statements which include all …\nReturn all known statements which include all topics and …\nReturn all statements, SCALE-encoded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCreate new instance of Offchain API.\nReturn the data of all known statements whose decryption …\nReturn the decrypted data of all known statements whose …\nReturn the statement and the decrypted data of all known …\nReturn all known statements whose decryption key is …\nRemove a statement from the store.\nSubmit a pre-encoded statement.\nThe node is an authority\nSystem RPC errors.\nThe node is a full node\nHealth struct returned by the RPC\nMust return the health of the network.\nInternal error.\nMust return the string representation of the addresses we …\nMust return the base58-encoded local <code>PeerId</code>.\nPeer argument is malformatted.\nMust return any potential parse error.\nMust return any potential parse error.\nMust return the list of reserved peers\nMust return the state of the network.\nThe role the node is running as\nMust return the node role.\nProvided block range couldn’t be resolved to a list of …\nNetwork Peer information\nMust return information about the peers we are connected …\nRequest to be processed.\nThe state of the syncing of the node.\nMust return the state of the node syncing.\nSystem API implementation\nClient implementation for the <code>SystemApi</code> RPC API.\nServer trait implementation for the <code>SystemApi</code> RPC API.\nRunning node’s static details.\nCall to an unsafe RPC was denied.\nPeer best block hash\nPeer best block number\nChain name.\nThe type of this chain.\nHeight of the current best block of the node.\nSystem RPC module errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSubstrate system API helpers.\nHeight of the highest block in the network.\nImplementation name.\nImplementation version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nIs the node syncing\nCreates new <code>System</code>.\nPeer ID\nNumber of connected peers\nA custom set of properties defined in the chain spec.\nRoles\nShould this node have any peers\nHeight of the block at which syncing started.\nAdds the supplied directives to the current log filter\nAdds the supplied directives to the current log filter\nAdds the supplied directives to the current log filter\nAdds a reserved peer. Returns the empty string or an …\nAdds a reserved peer. Returns the empty string or an …\nAdds a reserved peer. Returns the empty string or an …\nGet the chain’s name. Given as a string identifier.\nGet the chain’s name. Given as a string identifier.\nGet the chain’s name. Given as a string identifier.\nReturn health status of the node.\nReturn health status of the node.\nReturn health status of the node.\nReturns the multi-addresses that the local node is …\nReturns the multi-addresses that the local node is …\nReturns the multi-addresses that the local node is …\nReturns the base58-encoded PeerId of the node.\nReturns the base58-encoded PeerId of the node.\nReturns the base58-encoded PeerId of the node.\nGet the node’s implementation name. Plain old string.\nGet the node’s implementation name. Plain old string.")