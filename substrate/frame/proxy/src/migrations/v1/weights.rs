// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_proxy::migrations::v1`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-XX-XX, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-machine`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./substrate/frame/proxy/src/migrations/v1/weights.rs
// --header=./substrate/HEADER-APACHE2
// --template=./substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame::deps::{
	frame_support::{
		traits::Get,
		weights::{constants::RocksDbWeight, Weight},
	},
};

/// Weight functions needed for `pallet_proxy::migrations::v1`.
pub trait WeightInfo {
	/// Migrates a single proxy account with the given number of proxies.
	/// This includes reading old reserves, unreserving, creating holds, and storage mutations.
	fn migrate_proxy_account(proxy_count: u32) -> Weight;

	/// Migrates a single announcement account with the given number of announcements.
	/// This includes reading old reserves, unreserving, creating holds, and storage mutations.
	fn migrate_announcement_account(announcement_count: u32) -> Weight;
}

/// Weights for `pallet_proxy::migrations::v1` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(core::marker::PhantomData<T>);

impl<T: frame::deps::frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:0 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 32]`.
	fn migrate_proxy_account(p: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211 + p * (25 ±0)`
		//  Estimated: `4714`
		// Minimum execution time: 18_234_000 picoseconds.
		Weight::from_parts(19_956_932, 4714)
			// Standard Error: 1_533
			.saturating_add(Weight::from_parts(32_853, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}

	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Announcements` (r:0 w:1)
	/// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 32]`.
	fn migrate_announcement_account(a: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + a * (68 ±0)`
		//  Estimated: `4714`
		// Minimum execution time: 17_891_000 picoseconds.
		Weight::from_parts(19_434_567, 4714)
			// Standard Error: 1_891
			.saturating_add(Weight::from_parts(44_321, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:0 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 32]`.
	fn migrate_proxy_account(p: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211 + p * (25 ±0)`
		//  Estimated: `4714`
		// Minimum execution time: 18_234_000 picoseconds.
		Weight::from_parts(19_956_932, 4714)
			// Standard Error: 1_533
			.saturating_add(Weight::from_parts(32_853, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}

	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Announcements` (r:0 w:1)
	/// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 32]`.
	fn migrate_announcement_account(a: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + a * (68 ±0)`
		//  Estimated: `4714`
		// Minimum execution time: 17_891_000 picoseconds.
		Weight::from_parts(19_434_567, 4714)
			// Standard Error: 1_891
			.saturating_add(Weight::from_parts(44_321, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}