// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-09-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `4d14026c9cda`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/kitchensink-runtime/kitchensink_runtime.wasm
// --pallet=pallet_revive
// --header=/__w/polkadot-sdk/polkadot-sdk/substrate/HEADER-APACHE2
// --output=/__w/polkadot-sdk/polkadot-sdk/substrate/frame/revive/src/weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=substrate/.maintain/frame-weight-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes
// --exclude-pallets=pallet_xcm,pallet_xcm_benchmarks::fungible,pallet_xcm_benchmarks::generic,pallet_nomination_pools,pallet_remark,pallet_transaction_storage

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_revive`.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn call_with_pvm_code_per_byte(c: u32, ) -> Weight;
	fn call_with_evm_code_per_byte(c: u32, ) -> Weight;
	fn basic_block_compilation(b: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight;
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight;
	fn instantiate(i: u32, ) -> Weight;
	fn call() -> Weight;
	fn eth_call(d: u32, ) -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn map_account() -> Weight;
	fn unmap_account() -> Weight;
	fn dispatch_as_fallback_account() -> Weight;
	fn noop_host_fn(r: u32, ) -> Weight;
	fn seal_caller() -> Weight;
	fn seal_origin() -> Weight;
	fn to_account_id() -> Weight;
	fn seal_code_hash() -> Weight;
	fn own_code_hash() -> Weight;
	fn seal_code_size() -> Weight;
	fn caller_is_origin() -> Weight;
	fn caller_is_root() -> Weight;
	fn seal_address() -> Weight;
	fn weight_left() -> Weight;
	fn seal_ref_time_left() -> Weight;
	fn seal_balance() -> Weight;
	fn seal_balance_of() -> Weight;
	fn seal_get_immutable_data(n: u32, ) -> Weight;
	fn seal_set_immutable_data(n: u32, ) -> Weight;
	fn seal_value_transferred() -> Weight;
	fn minimum_balance() -> Weight;
	fn seal_return_data_size() -> Weight;
	fn seal_call_data_size() -> Weight;
	fn seal_gas_limit() -> Weight;
	fn seal_gas_price() -> Weight;
	fn seal_base_fee() -> Weight;
	fn seal_block_number() -> Weight;
	fn seal_block_author() -> Weight;
	fn seal_block_hash() -> Weight;
	fn seal_now() -> Weight;
	fn seal_weight_to_fee() -> Weight;
	fn seal_copy_to_contract(n: u32, ) -> Weight;
	fn seal_call_data_load() -> Weight;
	fn seal_call_data_copy(n: u32, ) -> Weight;
	fn seal_return(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight;
	fn get_storage_empty() -> Weight;
	fn get_storage_full() -> Weight;
	fn set_storage_empty() -> Weight;
	fn set_storage_full() -> Weight;
	fn seal_set_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_storage(n: u32, ) -> Weight;
	fn seal_get_storage(n: u32, ) -> Weight;
	fn seal_contains_storage(n: u32, ) -> Weight;
	fn seal_take_storage(n: u32, ) -> Weight;
	fn set_transient_storage_empty() -> Weight;
	fn set_transient_storage_full() -> Weight;
	fn get_transient_storage_empty() -> Weight;
	fn get_transient_storage_full() -> Weight;
	fn rollback_transient_storage() -> Weight;
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_transient_storage(n: u32, ) -> Weight;
	fn seal_get_transient_storage(n: u32, ) -> Weight;
	fn seal_contains_transient_storage(n: u32, ) -> Weight;
	fn seal_take_transient_storage(n: u32, ) -> Weight;
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight;
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight;
	fn seal_delegate_call() -> Weight;
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight;
	fn sha2_256(n: u32, ) -> Weight;
	fn identity(n: u32, ) -> Weight;
	fn ripemd_160(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(n: u32, ) -> Weight;
	fn hash_blake2_256(n: u32, ) -> Weight;
	fn hash_blake2_128(n: u32, ) -> Weight;
	fn seal_sr25519_verify(n: u32, ) -> Weight;
	fn ecdsa_recover() -> Weight;
	fn bn128_add() -> Weight;
	fn bn128_mul() -> Weight;
	fn bn128_pairing(n: u32, ) -> Weight;
	fn blake2f(n: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address() -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn evm_opcode(r: u32, ) -> Weight;
	fn instr(r: u32, ) -> Weight;
	fn instr_empty_loop(r: u32, ) -> Weight;
	fn extcodecopy(n: u32, ) -> Weight;
	fn v1_migration_step() -> Weight;
	fn v2_migration_step() -> Weight;
	fn on_finalize_per_transaction(n: u32, ) -> Weight;
	fn on_finalize_per_transaction_data(d: u32, ) -> Weight;
	fn on_finalize_per_event(e: u32, ) -> Weight;
	fn on_finalize_per_event_data(d: u32, ) -> Weight;
}

/// Weights for `pallet_revive` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 3_137_000 picoseconds.
		Weight::from_parts(3_342_000, 1632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458 + k * (69 ±0)`
		//  Estimated: `448 + k * (70 ±0)`
		// Minimum execution time: 14_338_000 picoseconds.
		Weight::from_parts(732_716, 448)
			// Standard Error: 1_405
			.saturating_add(Weight::from_parts(1_214_088, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn call_with_pvm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1172 + c * (1 ±0)`
		//  Estimated: `7107 + c * (1 ±0)`
		// Minimum execution time: 87_813_000 picoseconds.
		Weight::from_parts(124_568_531, 7107)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(1_417, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[1, 10240]`.
	fn call_with_evm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1112`
		//  Estimated: `7051`
		// Minimum execution time: 83_039_000 picoseconds.
		Weight::from_parts(86_967_123, 7051)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(7, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4516`
		//  Estimated: `10456`
		// Minimum execution time: 126_331_000 picoseconds.
		Weight::from_parts(130_785_116, 10456)
			// Standard Error: 414_115
			.saturating_add(Weight::from_parts(564_683, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `881`
		//  Estimated: `6811`
		// Minimum execution time: 770_540_000 picoseconds.
		Weight::from_parts(38_373_107, 6811)
			// Standard Error: 35
			.saturating_add(Weight::from_parts(20_159, 0).saturating_mul(c.into()))
			// Standard Error: 28
			.saturating_add(Weight::from_parts(5_201, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `881`
		//  Estimated: `6821`
		// Minimum execution time: 291_223_000 picoseconds.
		Weight::from_parts(204_772_655, 6821)
			// Standard Error: 23
			.saturating_add(Weight::from_parts(14_892, 0).saturating_mul(c.into()))
			// Standard Error: 18
			.saturating_add(Weight::from_parts(402, 0).saturating_mul(i.into()))
			// Standard Error: 1_531_657
			.saturating_add(Weight::from_parts(26_253_609, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1623`
		//  Estimated: `7552`
		// Minimum execution time: 175_097_000 picoseconds.
		Weight::from_parts(178_245_989, 7552)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(4_291, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734`
		// Minimum execution time: 89_950_000 picoseconds.
		Weight::from_parts(93_653_000, 7734)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734`
		// Minimum execution time: 96_129_000 picoseconds.
		Weight::from_parts(100_557_626, 7734)
			// Standard Error: 377_039
			.saturating_add(Weight::from_parts(24_138_173, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `303`
		//  Estimated: `3768`
		// Minimum execution time: 56_402_000 picoseconds.
		Weight::from_parts(48_856_000, 3768)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(14_177, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 52_285_000 picoseconds.
		Weight::from_parts(53_452_000, 3923)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `797`
		//  Estimated: `6737`
		// Minimum execution time: 64_792_000 picoseconds.
		Weight::from_parts(66_793_000, 6737)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3975`
		// Minimum execution time: 54_348_000 picoseconds.
		Weight::from_parts(54_970_000, 3975)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `93`
		//  Estimated: `3558`
		// Minimum execution time: 39_090_000 picoseconds.
		Weight::from_parts(40_311_000, 3558)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 13_141_000 picoseconds.
		Weight::from_parts(13_843_000, 3610)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_540_000 picoseconds.
		Weight::from_parts(8_693_337, 0)
			// Standard Error: 204
			.saturating_add(Weight::from_parts(169_076, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 333_000 picoseconds.
		Weight::from_parts(397_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 321_000 picoseconds.
		Weight::from_parts(347_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567`
		//  Estimated: `4032`
		// Minimum execution time: 8_337_000 picoseconds.
		Weight::from_parts(8_794_000, 4032)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3868`
		// Minimum execution time: 9_365_000 picoseconds.
		Weight::from_parts(9_849_000, 3868)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366`
		//  Estimated: `0`
		// Minimum execution time: 7_147_000 picoseconds.
		Weight::from_parts(7_593_000, 0)
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `3940`
		// Minimum execution time: 12_997_000 picoseconds.
		Weight::from_parts(13_301_000, 3940)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_035_000 picoseconds.
		Weight::from_parts(1_137_000, 0)
	}
	fn caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_036_000 picoseconds.
		Weight::from_parts(1_120_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 308_000 picoseconds.
		Weight::from_parts(336_000, 0)
	}
	fn weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 960_000 picoseconds.
		Weight::from_parts(1_043_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 267_000 picoseconds.
		Weight::from_parts(297_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `469`
		//  Estimated: `0`
		// Minimum execution time: 12_434_000 picoseconds.
		Weight::from_parts(12_790_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791`
		//  Estimated: `4256`
		// Minimum execution time: 18_486_000 picoseconds.
		Weight::from_parts(19_245_000, 4256)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (1 ±0)`
		//  Estimated: `3736 + n * (1 ±0)`
		// Minimum execution time: 6_149_000 picoseconds.
		Weight::from_parts(6_874_947, 3736)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(563, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_979_000 picoseconds.
		Weight::from_parts(2_235_236, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(587, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 291_000 picoseconds.
		Weight::from_parts(325_000, 0)
	}
	fn minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_156_000 picoseconds.
		Weight::from_parts(1_260_000, 0)
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 255_000 picoseconds.
		Weight::from_parts(287_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 242_000 picoseconds.
		Weight::from_parts(282_000, 0)
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 448_000 picoseconds.
		Weight::from_parts(494_000, 0)
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 255_000 picoseconds.
		Weight::from_parts(293_000, 0)
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(285_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 245_000 picoseconds.
		Weight::from_parts(309_000, 0)
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1626`
		// Minimum execution time: 21_807_000 picoseconds.
		Weight::from_parts(22_212_000, 1626)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::BlockHash` (r:1 w:0)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295`
		//  Estimated: `3760`
		// Minimum execution time: 8_549_000 picoseconds.
		Weight::from_parts(8_828_000, 3760)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 264_000 picoseconds.
		Weight::from_parts(290_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_595_000 picoseconds.
		Weight::from_parts(1_732_000, 0)
	}
	/// The range of component `n` is `[0, 1048572]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 444_000 picoseconds.
		Weight::from_parts(661_839, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(238, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 263_000 picoseconds.
		Weight::from_parts(305_000, 0)
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 258_000 picoseconds.
		Weight::from_parts(284_000, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(150, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 131072]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 275_000 picoseconds.
		Weight::from_parts(557_511, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(236, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583 + r * (368 ±0)`
		//  Estimated: `4048 + r * (2208 ±0)`
		// Minimum execution time: 16_800_000 picoseconds.
		Weight::from_parts(17_989_334, 4048)
			// Standard Error: 61_844
			.saturating_add(Weight::from_parts(45_142_965, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2208).saturating_mul(r.into()))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_480_000 picoseconds.
		Weight::from_parts(4_551_525, 0)
			// Standard Error: 3_383
			.saturating_add(Weight::from_parts(222_280, 0).saturating_mul(t.into()))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(1_016, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 7_334_000 picoseconds.
		Weight::from_parts(7_739_000, 648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 41_676_000 picoseconds.
		Weight::from_parts(43_124_000, 10658)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 8_314_000 picoseconds.
		Weight::from_parts(8_847_000, 648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 43_072_000 picoseconds.
		Weight::from_parts(44_347_000, 10658)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 8_670_000 picoseconds.
		Weight::from_parts(9_444_232, 247)
			// Standard Error: 56
			.saturating_add(Weight::from_parts(569, 0).saturating_mul(n.into()))
			// Standard Error: 56
			.saturating_add(Weight::from_parts(1_223, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_312_000 picoseconds.
		Weight::from_parts(9_452_645, 247)
			// Standard Error: 68
			.saturating_add(Weight::from_parts(941, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_084_000 picoseconds.
		Weight::from_parts(9_143_251, 247)
			// Standard Error: 84
			.saturating_add(Weight::from_parts(1_703, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 7_422_000 picoseconds.
		Weight::from_parts(8_507_657, 247)
			// Standard Error: 78
			.saturating_add(Weight::from_parts(863, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_534_000 picoseconds.
		Weight::from_parts(10_112_230, 247)
			// Standard Error: 88
			.saturating_add(Weight::from_parts(1_599, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_569_000 picoseconds.
		Weight::from_parts(1_671_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_901_000 picoseconds.
		Weight::from_parts(2_108_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_574_000 picoseconds.
		Weight::from_parts(1_693_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_731_000 picoseconds.
		Weight::from_parts(1_885_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_235_000 picoseconds.
		Weight::from_parts(1_357_000, 0)
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_233_000 picoseconds.
		Weight::from_parts(2_580_006, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(180, 0).saturating_mul(n.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(464, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_996_000 picoseconds.
		Weight::from_parts(2_490_053, 0)
			// Standard Error: 25
			.saturating_add(Weight::from_parts(346, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_958_000 picoseconds.
		Weight::from_parts(2_167_207, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(455, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_771_000 picoseconds.
		Weight::from_parts(2_055_166, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(194, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_600_000 picoseconds.
		Weight::from_parts(2_869_587, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(45, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1982`
		//  Estimated: `5447`
		// Minimum execution time: 89_339_000 picoseconds.
		Weight::from_parts(71_194_785, 5447)
			// Standard Error: 177_775
			.saturating_add(Weight::from_parts(18_151_202, 0).saturating_mul(t.into()))
			// Standard Error: 177_775
			.saturating_add(Weight::from_parts(25_131_334, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 130972]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366 + d * (212 ±0)`
		//  Estimated: `2021 + d * (2021 ±0)`
		// Minimum execution time: 24_467_000 picoseconds.
		Weight::from_parts(12_119_417, 2021)
			// Standard Error: 40_827
			.saturating_add(Weight::from_parts(13_748_197, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(394, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2021).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1363`
		//  Estimated: `4828`
		// Minimum execution time: 32_504_000 picoseconds.
		Weight::from_parts(33_826_000, 4828)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 131072]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1394`
		//  Estimated: `4860`
		// Minimum execution time: 147_209_000 picoseconds.
		Weight::from_parts(104_165_168, 4860)
			// Standard Error: 533_910
			.saturating_add(Weight::from_parts(18_524_068, 0).saturating_mul(t.into()))
			// Standard Error: 533_910
			.saturating_add(Weight::from_parts(30_198_831, 0).saturating_mul(d.into()))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(4_029, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_239_000 picoseconds.
		Weight::from_parts(13_350_242, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_285, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 740_000 picoseconds.
		Weight::from_parts(894_530, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(148, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_145_000 picoseconds.
		Weight::from_parts(2_106_751, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_789, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_140_000 picoseconds.
		Weight::from_parts(12_704_090, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3_580, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_577_000 picoseconds.
		Weight::from_parts(11_102_200, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_447, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_643_000 picoseconds.
		Weight::from_parts(11_977_668, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_451, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048321]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 42_844_000 picoseconds.
		Weight::from_parts(95_143_512, 0)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(5_028, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_183_000 picoseconds.
		Weight::from_parts(47_222_000, 0)
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_619_000 picoseconds.
		Weight::from_parts(15_727_000, 0)
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 980_244_000 picoseconds.
		Weight::from_parts(992_300_000, 0)
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 829_000 picoseconds.
		Weight::from_parts(5_035_974_897, 0)
			// Standard Error: 11_531_145
			.saturating_add(Weight::from_parts(6_051_195_715, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 936_000 picoseconds.
		Weight::from_parts(1_212_971, 0)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(28_732, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_938_000 picoseconds.
		Weight::from_parts(13_110_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[0, 1]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391 + r * (401 ±0)`
		//  Estimated: `6331 + r * (2129 ±0)`
		// Minimum execution time: 14_998_000 picoseconds.
		Weight::from_parts(16_168_812, 6331)
			// Standard Error: 52_358
			.saturating_add(Weight::from_parts(44_835_387, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2129).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn evm_opcode(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_228_000 picoseconds.
		Weight::from_parts(1_828_284, 0)
			// Standard Error: 19
			.saturating_add(Weight::from_parts(6_919, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_500_000 picoseconds.
		Weight::from_parts(64_160_653, 0)
			// Standard Error: 284
			.saturating_add(Weight::from_parts(130_625, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_240_000 picoseconds.
		Weight::from_parts(2_791_448, 0)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(71_969, 0).saturating_mul(r.into()))
	}
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1000, 10000]`.
	fn extcodecopy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `457 + n * (1 ±0)`
		//  Estimated: `3922 + n * (1 ±0)`
		// Minimum execution time: 14_222_000 picoseconds.
		Weight::from_parts(14_034_006, 3922)
			// Standard Error: 6
			.saturating_add(Weight::from_parts(852, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6256`
		// Minimum execution time: 12_029_000 picoseconds.
		Weight::from_parts(12_717_000, 6256)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	fn v2_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439`
		//  Estimated: `6794`
		// Minimum execution time: 63_362_000 picoseconds.
		Weight::from_parts(65_057_000, 6794)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 200]`.
	fn on_finalize_per_transaction(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2897 + n * (65 ±0)`
		//  Estimated: `6196 + n * (67 ±0)`
		// Minimum execution time: 26_280_000 picoseconds.
		Weight::from_parts(54_943_766, 6196)
			// Standard Error: 4_467
			.saturating_add(Weight::from_parts(405_154, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 67).saturating_mul(n.into()))
	}
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1000]`.
	fn on_finalize_per_transaction_data(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3153 + d * (3 ±0)`
		//  Estimated: `6612 + d * (3 ±0)`
		// Minimum execution time: 56_248_000 picoseconds.
		Weight::from_parts(58_624_974, 6612)
			// Standard Error: 170
			.saturating_add(Weight::from_parts(12_979, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(d.into()))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `e` is `[0, 100]`.
	fn on_finalize_per_event(_e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1377`
		//  Estimated: `4842`
		// Minimum execution time: 43_263_000 picoseconds.
		Weight::from_parts(45_551_022, 4842)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 16384]`.
	fn on_finalize_per_event_data(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1377`
		//  Estimated: `4842`
		// Minimum execution time: 43_003_000 picoseconds.
		Weight::from_parts(45_119_285, 4842)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(44, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 3_137_000 picoseconds.
		Weight::from_parts(3_342_000, 1632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458 + k * (69 ±0)`
		//  Estimated: `448 + k * (70 ±0)`
		// Minimum execution time: 14_338_000 picoseconds.
		Weight::from_parts(732_716, 448)
			// Standard Error: 1_405
			.saturating_add(Weight::from_parts(1_214_088, 0).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn call_with_pvm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1172 + c * (1 ±0)`
		//  Estimated: `7107 + c * (1 ±0)`
		// Minimum execution time: 87_813_000 picoseconds.
		Weight::from_parts(124_568_531, 7107)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(1_417, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[1, 10240]`.
	fn call_with_evm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1112`
		//  Estimated: `7051`
		// Minimum execution time: 83_039_000 picoseconds.
		Weight::from_parts(86_967_123, 7051)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(7, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4516`
		//  Estimated: `10456`
		// Minimum execution time: 126_331_000 picoseconds.
		Weight::from_parts(130_785_116, 10456)
			// Standard Error: 414_115
			.saturating_add(Weight::from_parts(564_683, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `881`
		//  Estimated: `6811`
		// Minimum execution time: 770_540_000 picoseconds.
		Weight::from_parts(38_373_107, 6811)
			// Standard Error: 35
			.saturating_add(Weight::from_parts(20_159, 0).saturating_mul(c.into()))
			// Standard Error: 28
			.saturating_add(Weight::from_parts(5_201, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `881`
		//  Estimated: `6821`
		// Minimum execution time: 291_223_000 picoseconds.
		Weight::from_parts(204_772_655, 6821)
			// Standard Error: 23
			.saturating_add(Weight::from_parts(14_892, 0).saturating_mul(c.into()))
			// Standard Error: 18
			.saturating_add(Weight::from_parts(402, 0).saturating_mul(i.into()))
			// Standard Error: 1_531_657
			.saturating_add(Weight::from_parts(26_253_609, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1623`
		//  Estimated: `7552`
		// Minimum execution time: 175_097_000 picoseconds.
		Weight::from_parts(178_245_989, 7552)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(4_291, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734`
		// Minimum execution time: 89_950_000 picoseconds.
		Weight::from_parts(93_653_000, 7734)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734`
		// Minimum execution time: 96_129_000 picoseconds.
		Weight::from_parts(100_557_626, 7734)
			// Standard Error: 377_039
			.saturating_add(Weight::from_parts(24_138_173, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `303`
		//  Estimated: `3768`
		// Minimum execution time: 56_402_000 picoseconds.
		Weight::from_parts(48_856_000, 3768)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(14_177, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 52_285_000 picoseconds.
		Weight::from_parts(53_452_000, 3923)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `797`
		//  Estimated: `6737`
		// Minimum execution time: 64_792_000 picoseconds.
		Weight::from_parts(66_793_000, 6737)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3975`
		// Minimum execution time: 54_348_000 picoseconds.
		Weight::from_parts(54_970_000, 3975)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `93`
		//  Estimated: `3558`
		// Minimum execution time: 39_090_000 picoseconds.
		Weight::from_parts(40_311_000, 3558)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 13_141_000 picoseconds.
		Weight::from_parts(13_843_000, 3610)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_540_000 picoseconds.
		Weight::from_parts(8_693_337, 0)
			// Standard Error: 204
			.saturating_add(Weight::from_parts(169_076, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 333_000 picoseconds.
		Weight::from_parts(397_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 321_000 picoseconds.
		Weight::from_parts(347_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567`
		//  Estimated: `4032`
		// Minimum execution time: 8_337_000 picoseconds.
		Weight::from_parts(8_794_000, 4032)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3868`
		// Minimum execution time: 9_365_000 picoseconds.
		Weight::from_parts(9_849_000, 3868)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366`
		//  Estimated: `0`
		// Minimum execution time: 7_147_000 picoseconds.
		Weight::from_parts(7_593_000, 0)
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `3940`
		// Minimum execution time: 12_997_000 picoseconds.
		Weight::from_parts(13_301_000, 3940)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_035_000 picoseconds.
		Weight::from_parts(1_137_000, 0)
	}
	fn caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_036_000 picoseconds.
		Weight::from_parts(1_120_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 308_000 picoseconds.
		Weight::from_parts(336_000, 0)
	}
	fn weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 960_000 picoseconds.
		Weight::from_parts(1_043_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 267_000 picoseconds.
		Weight::from_parts(297_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `469`
		//  Estimated: `0`
		// Minimum execution time: 12_434_000 picoseconds.
		Weight::from_parts(12_790_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791`
		//  Estimated: `4256`
		// Minimum execution time: 18_486_000 picoseconds.
		Weight::from_parts(19_245_000, 4256)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (1 ±0)`
		//  Estimated: `3736 + n * (1 ±0)`
		// Minimum execution time: 6_149_000 picoseconds.
		Weight::from_parts(6_874_947, 3736)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(563, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_979_000 picoseconds.
		Weight::from_parts(2_235_236, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(587, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 291_000 picoseconds.
		Weight::from_parts(325_000, 0)
	}
	fn minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_156_000 picoseconds.
		Weight::from_parts(1_260_000, 0)
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 255_000 picoseconds.
		Weight::from_parts(287_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 242_000 picoseconds.
		Weight::from_parts(282_000, 0)
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 448_000 picoseconds.
		Weight::from_parts(494_000, 0)
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 255_000 picoseconds.
		Weight::from_parts(293_000, 0)
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(285_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 245_000 picoseconds.
		Weight::from_parts(309_000, 0)
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1626`
		// Minimum execution time: 21_807_000 picoseconds.
		Weight::from_parts(22_212_000, 1626)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::BlockHash` (r:1 w:0)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295`
		//  Estimated: `3760`
		// Minimum execution time: 8_549_000 picoseconds.
		Weight::from_parts(8_828_000, 3760)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 264_000 picoseconds.
		Weight::from_parts(290_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_595_000 picoseconds.
		Weight::from_parts(1_732_000, 0)
	}
	/// The range of component `n` is `[0, 1048572]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 444_000 picoseconds.
		Weight::from_parts(661_839, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(238, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 263_000 picoseconds.
		Weight::from_parts(305_000, 0)
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 258_000 picoseconds.
		Weight::from_parts(284_000, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(150, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 131072]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 275_000 picoseconds.
		Weight::from_parts(557_511, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(236, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583 + r * (368 ±0)`
		//  Estimated: `4048 + r * (2208 ±0)`
		// Minimum execution time: 16_800_000 picoseconds.
		Weight::from_parts(17_989_334, 4048)
			// Standard Error: 61_844
			.saturating_add(Weight::from_parts(45_142_965, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2208).saturating_mul(r.into()))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_480_000 picoseconds.
		Weight::from_parts(4_551_525, 0)
			// Standard Error: 3_383
			.saturating_add(Weight::from_parts(222_280, 0).saturating_mul(t.into()))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(1_016, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 7_334_000 picoseconds.
		Weight::from_parts(7_739_000, 648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 41_676_000 picoseconds.
		Weight::from_parts(43_124_000, 10658)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 8_314_000 picoseconds.
		Weight::from_parts(8_847_000, 648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 43_072_000 picoseconds.
		Weight::from_parts(44_347_000, 10658)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 8_670_000 picoseconds.
		Weight::from_parts(9_444_232, 247)
			// Standard Error: 56
			.saturating_add(Weight::from_parts(569, 0).saturating_mul(n.into()))
			// Standard Error: 56
			.saturating_add(Weight::from_parts(1_223, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_312_000 picoseconds.
		Weight::from_parts(9_452_645, 247)
			// Standard Error: 68
			.saturating_add(Weight::from_parts(941, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_084_000 picoseconds.
		Weight::from_parts(9_143_251, 247)
			// Standard Error: 84
			.saturating_add(Weight::from_parts(1_703, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 7_422_000 picoseconds.
		Weight::from_parts(8_507_657, 247)
			// Standard Error: 78
			.saturating_add(Weight::from_parts(863, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_534_000 picoseconds.
		Weight::from_parts(10_112_230, 247)
			// Standard Error: 88
			.saturating_add(Weight::from_parts(1_599, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_569_000 picoseconds.
		Weight::from_parts(1_671_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_901_000 picoseconds.
		Weight::from_parts(2_108_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_574_000 picoseconds.
		Weight::from_parts(1_693_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_731_000 picoseconds.
		Weight::from_parts(1_885_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_235_000 picoseconds.
		Weight::from_parts(1_357_000, 0)
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_233_000 picoseconds.
		Weight::from_parts(2_580_006, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(180, 0).saturating_mul(n.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(464, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_996_000 picoseconds.
		Weight::from_parts(2_490_053, 0)
			// Standard Error: 25
			.saturating_add(Weight::from_parts(346, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_958_000 picoseconds.
		Weight::from_parts(2_167_207, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(455, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_771_000 picoseconds.
		Weight::from_parts(2_055_166, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(194, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_600_000 picoseconds.
		Weight::from_parts(2_869_587, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(45, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1982`
		//  Estimated: `5447`
		// Minimum execution time: 89_339_000 picoseconds.
		Weight::from_parts(71_194_785, 5447)
			// Standard Error: 177_775
			.saturating_add(Weight::from_parts(18_151_202, 0).saturating_mul(t.into()))
			// Standard Error: 177_775
			.saturating_add(Weight::from_parts(25_131_334, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 130972]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366 + d * (212 ±0)`
		//  Estimated: `2021 + d * (2021 ±0)`
		// Minimum execution time: 24_467_000 picoseconds.
		Weight::from_parts(12_119_417, 2021)
			// Standard Error: 40_827
			.saturating_add(Weight::from_parts(13_748_197, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(394, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2021).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1363`
		//  Estimated: `4828`
		// Minimum execution time: 32_504_000 picoseconds.
		Weight::from_parts(33_826_000, 4828)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 131072]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1394`
		//  Estimated: `4860`
		// Minimum execution time: 147_209_000 picoseconds.
		Weight::from_parts(104_165_168, 4860)
			// Standard Error: 533_910
			.saturating_add(Weight::from_parts(18_524_068, 0).saturating_mul(t.into()))
			// Standard Error: 533_910
			.saturating_add(Weight::from_parts(30_198_831, 0).saturating_mul(d.into()))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(4_029, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_239_000 picoseconds.
		Weight::from_parts(13_350_242, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_285, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 740_000 picoseconds.
		Weight::from_parts(894_530, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(148, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_145_000 picoseconds.
		Weight::from_parts(2_106_751, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_789, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_140_000 picoseconds.
		Weight::from_parts(12_704_090, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3_580, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_577_000 picoseconds.
		Weight::from_parts(11_102_200, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_447, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_643_000 picoseconds.
		Weight::from_parts(11_977_668, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1_451, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048321]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 42_844_000 picoseconds.
		Weight::from_parts(95_143_512, 0)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(5_028, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_183_000 picoseconds.
		Weight::from_parts(47_222_000, 0)
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_619_000 picoseconds.
		Weight::from_parts(15_727_000, 0)
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 980_244_000 picoseconds.
		Weight::from_parts(992_300_000, 0)
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 829_000 picoseconds.
		Weight::from_parts(5_035_974_897, 0)
			// Standard Error: 11_531_145
			.saturating_add(Weight::from_parts(6_051_195_715, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 936_000 picoseconds.
		Weight::from_parts(1_212_971, 0)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(28_732, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_938_000 picoseconds.
		Weight::from_parts(13_110_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[0, 1]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391 + r * (401 ±0)`
		//  Estimated: `6331 + r * (2129 ±0)`
		// Minimum execution time: 14_998_000 picoseconds.
		Weight::from_parts(16_168_812, 6331)
			// Standard Error: 52_358
			.saturating_add(Weight::from_parts(44_835_387, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2129).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn evm_opcode(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_228_000 picoseconds.
		Weight::from_parts(1_828_284, 0)
			// Standard Error: 19
			.saturating_add(Weight::from_parts(6_919, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_500_000 picoseconds.
		Weight::from_parts(64_160_653, 0)
			// Standard Error: 284
			.saturating_add(Weight::from_parts(130_625, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_240_000 picoseconds.
		Weight::from_parts(2_791_448, 0)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(71_969, 0).saturating_mul(r.into()))
	}
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1000, 10000]`.
	fn extcodecopy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `457 + n * (1 ±0)`
		//  Estimated: `3922 + n * (1 ±0)`
		// Minimum execution time: 14_222_000 picoseconds.
		Weight::from_parts(14_034_006, 3922)
			// Standard Error: 6
			.saturating_add(Weight::from_parts(852, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6256`
		// Minimum execution time: 12_029_000 picoseconds.
		Weight::from_parts(12_717_000, 6256)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `MaxEncodedLen`)
	fn v2_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439`
		//  Estimated: `6794`
		// Minimum execution time: 63_362_000 picoseconds.
		Weight::from_parts(65_057_000, 6794)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 200]`.
	fn on_finalize_per_transaction(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2897 + n * (65 ±0)`
		//  Estimated: `6196 + n * (67 ±0)`
		// Minimum execution time: 26_280_000 picoseconds.
		Weight::from_parts(54_943_766, 6196)
			// Standard Error: 4_467
			.saturating_add(Weight::from_parts(405_154, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 67).saturating_mul(n.into()))
	}
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1000]`.
	fn on_finalize_per_transaction_data(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3153 + d * (3 ±0)`
		//  Estimated: `6612 + d * (3 ±0)`
		// Minimum execution time: 56_248_000 picoseconds.
		Weight::from_parts(58_624_974, 6612)
			// Standard Error: 170
			.saturating_add(Weight::from_parts(12_979, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(d.into()))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `e` is `[0, 100]`.
	fn on_finalize_per_event(_e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1377`
		//  Estimated: `4842`
		// Minimum execution time: 43_263_000 picoseconds.
		Weight::from_parts(45_551_022, 4842)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::BlockHash` (r:1 w:1)
	/// Proof: `Revive::BlockHash` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Revive::EthBlockBuilderIR` (r:1 w:1)
	/// Proof: `Revive::EthBlockBuilderIR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::EthereumBlock` (r:0 w:1)
	/// Proof: `Revive::EthereumBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::ReceiptInfoData` (r:0 w:1)
	/// Proof: `Revive::ReceiptInfoData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 16384]`.
	fn on_finalize_per_event_data(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1377`
		//  Estimated: `4842`
		// Minimum execution time: 43_003_000 picoseconds.
		Weight::from_parts(45_119_285, 4842)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(44, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
