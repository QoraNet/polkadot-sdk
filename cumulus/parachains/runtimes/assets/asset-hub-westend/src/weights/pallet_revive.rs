// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-10-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `276db60989d8`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/asset-hub-westend-runtime/asset_hub_westend_runtime.wasm
// --pallet=pallet_revive
// --header=/__w/polkadot-sdk/polkadot-sdk/cumulus/file_header.txt
// --output=./cumulus/parachains/runtimes/assets/asset-hub-westend/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_revive`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_revive::WeightInfo for WeightInfo<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1660`
		// Minimum execution time: 3_360_000 picoseconds.
		Weight::from_parts(3_533_000, 0)
			.saturating_add(Weight::from_parts(0, 1660))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `500 + k * (69 ±0)`
		//  Estimated: `490 + k * (70 ±0)`
		// Minimum execution time: 24_554_000 picoseconds.
		Weight::from_parts(25_321_000, 0)
			.saturating_add(Weight::from_parts(0, 490))
			// Standard Error: 3_369
			.saturating_add(Weight::from_parts(3_032_400, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1922 + c * (1 ±0)`
		//  Estimated: `7871 + c * (1 ±0)`
		// Minimum execution time: 102_230_000 picoseconds.
		Weight::from_parts(136_366_829, 0)
			.saturating_add(Weight::from_parts(0, 7871))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(1_509, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5222`
		//  Estimated: `11162`
		// Minimum execution time: 137_171_000 picoseconds.
		Weight::from_parts(143_883_000, 0)
			.saturating_add(Weight::from_parts(0, 11162))
			// Standard Error: 423_905
			.saturating_add(Weight::from_parts(688_400, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4472`
		//  Estimated: `10157`
		// Minimum execution time: 1_351_594_000 picoseconds.
		Weight::from_parts(269_244_013, 0)
			.saturating_add(Weight::from_parts(0, 10157))
			// Standard Error: 38
			.saturating_add(Weight::from_parts(18_927, 0).saturating_mul(c.into()))
			// Standard Error: 15
			.saturating_add(Weight::from_parts(4_181, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4274`
		//  Estimated: `10214 + d * (2475 ±0)`
		// Minimum execution time: 334_419_000 picoseconds.
		Weight::from_parts(198_764_104, 0)
			.saturating_add(Weight::from_parts(0, 10214))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(15_249, 0).saturating_mul(c.into()))
			// Standard Error: 14
			.saturating_add(Weight::from_parts(336, 0).saturating_mul(i.into()))
			// Standard Error: 2_348_210
			.saturating_add(Weight::from_parts(56_741_914, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3970`
		//  Estimated: `7418`
		// Minimum execution time: 195_530_000 picoseconds.
		Weight::from_parts(190_834_647, 0)
			.saturating_add(Weight::from_parts(0, 7418))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(4_379, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2622`
		//  Estimated: `8562`
		// Minimum execution time: 103_789_000 picoseconds.
		Weight::from_parts(106_620_000, 0)
			.saturating_add(Weight::from_parts(0, 8562))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2622`
		//  Estimated: `8562 + d * (2475 ±0)`
		// Minimum execution time: 101_478_000 picoseconds.
		Weight::from_parts(107_012_012, 0)
			.saturating_add(Weight::from_parts(0, 8562))
			// Standard Error: 476_275
			.saturating_add(Weight::from_parts(28_631_687, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1968`
		//  Estimated: `5433`
		// Minimum execution time: 69_269_000 picoseconds.
		Weight::from_parts(60_727_282, 0)
			.saturating_add(Weight::from_parts(0, 5433))
			// Standard Error: 18
			.saturating_add(Weight::from_parts(14_173, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2200`
		//  Estimated: `5665`
		// Minimum execution time: 64_698_000 picoseconds.
		Weight::from_parts(66_727_000, 0)
			.saturating_add(Weight::from_parts(0, 5665))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `6532`
		// Minimum execution time: 27_181_000 picoseconds.
		Weight::from_parts(28_501_000, 0)
			.saturating_add(Weight::from_parts(0, 6532))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1968`
		//  Estimated: `5433`
		// Minimum execution time: 66_275_000 picoseconds.
		Weight::from_parts(68_632_000, 0)
			.saturating_add(Weight::from_parts(0, 5433))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(265), added: 2740, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2084`
		//  Estimated: `5549`
		// Minimum execution time: 57_985_000 picoseconds.
		Weight::from_parts(59_796_000, 0)
			.saturating_add(Weight::from_parts(0, 5549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_511_000 picoseconds.
		Weight::from_parts(8_776_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_378_000 picoseconds.
		Weight::from_parts(12_384_261, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 363
			.saturating_add(Weight::from_parts(182_003, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_416_000 picoseconds.
		Weight::from_parts(1_637_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_460_000 picoseconds.
		Weight::from_parts(1_647_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn seal_to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `332`
		//  Estimated: `3797`
		// Minimum execution time: 7_517_000 picoseconds.
		Weight::from_parts(7_971_000, 0)
			.saturating_add(Weight::from_parts(0, 3797))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `469`
		//  Estimated: `3934`
		// Minimum execution time: 9_959_000 picoseconds.
		Weight::from_parts(10_618_000, 0)
			.saturating_add(Weight::from_parts(0, 3934))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_393_000 picoseconds.
		Weight::from_parts(1_595_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `538`
		//  Estimated: `4003`
		// Minimum execution time: 15_969_000 picoseconds.
		Weight::from_parts(16_758_000, 0)
			.saturating_add(Weight::from_parts(0, 4003))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_531_000 picoseconds.
		Weight::from_parts(1_681_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_416_000 picoseconds.
		Weight::from_parts(1_599_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_444_000 picoseconds.
		Weight::from_parts(1_650_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_899_000 picoseconds.
		Weight::from_parts(2_093_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_380_000 picoseconds.
		Weight::from_parts(1_589_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1673`
		//  Estimated: `0`
		// Minimum execution time: 18_200_000 picoseconds.
		Weight::from_parts(19_145_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1760`
		//  Estimated: `5225`
		// Minimum execution time: 24_278_000 picoseconds.
		Weight::from_parts(25_620_000, 0)
			.saturating_add(Weight::from_parts(0, 5225))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + n * (1 ±0)`
		//  Estimated: `3769 + n * (1 ±0)`
		// Minimum execution time: 7_795_000 picoseconds.
		Weight::from_parts(8_736_461, 0)
			.saturating_add(Weight::from_parts(0, 3769))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(535, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `258`
		// Minimum execution time: 6_747_000 picoseconds.
		Weight::from_parts(7_336_628, 0)
			.saturating_add(Weight::from_parts(0, 258))
			// Standard Error: 5
			.saturating_add(Weight::from_parts(511, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_424_000 picoseconds.
		Weight::from_parts(1_577_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_400_000 picoseconds.
		Weight::from_parts(1_567_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_368_000 picoseconds.
		Weight::from_parts(1_603_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_304_000 picoseconds.
		Weight::from_parts(1_448_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_698_000 picoseconds.
		Weight::from_parts(1_891_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_338_000 picoseconds.
		Weight::from_parts(1_498_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_383_000 picoseconds.
		Weight::from_parts(1_588_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_312_000 picoseconds.
		Weight::from_parts(1_543_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Aura::Authorities` (r:1 w:0)
	/// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442`
		//  Estimated: `1927`
		// Minimum execution time: 28_446_000 picoseconds.
		Weight::from_parts(29_443_000, 0)
			.saturating_add(Weight::from_parts(0, 1927))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 5_001_000 picoseconds.
		Weight::from_parts(5_240_000, 0)
			.saturating_add(Weight::from_parts(0, 3495))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_322_000 picoseconds.
		Weight::from_parts(1_590_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_295_000 picoseconds.
		Weight::from_parts(3_678_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_477_000 picoseconds.
		Weight::from_parts(1_926_856, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(203, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_376_000 picoseconds.
		Weight::from_parts(1_564_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_391_000 picoseconds.
		Weight::from_parts(1_637_340, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(117, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_337_000 picoseconds.
		Weight::from_parts(1_883_218, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(202, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366`
		//  Estimated: `3831`
		// Minimum execution time: 21_587_000 picoseconds.
		Weight::from_parts(22_654_000, 0)
			.saturating_add(Weight::from_parts(0, 3831))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_469_000 picoseconds.
		Weight::from_parts(7_874_426, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 5_897
			.saturating_add(Weight::from_parts(274_849, 0).saturating_mul(t.into()))
			// Standard Error: 64
			.saturating_add(Weight::from_parts(1_016, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `653`
		// Minimum execution time: 9_890_000 picoseconds.
		Weight::from_parts(10_489_000, 0)
			.saturating_add(Weight::from_parts(0, 653))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10663`
		//  Estimated: `10663`
		// Minimum execution time: 45_072_000 picoseconds.
		Weight::from_parts(45_825_000, 0)
			.saturating_add(Weight::from_parts(0, 10663))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `657`
		//  Estimated: `657`
		// Minimum execution time: 18_436_000 picoseconds.
		Weight::from_parts(19_903_000, 0)
			.saturating_add(Weight::from_parts(0, 657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10667`
		//  Estimated: `10667`
		// Minimum execution time: 56_730_000 picoseconds.
		Weight::from_parts(58_323_000, 0)
			.saturating_add(Weight::from_parts(0, 10667))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `257 + o * (1 ±0)`
		//  Estimated: `256 + o * (1 ±0)`
		// Minimum execution time: 18_298_000 picoseconds.
		Weight::from_parts(20_431_344, 0)
			.saturating_add(Weight::from_parts(0, 256))
			// Standard Error: 144
			.saturating_add(Weight::from_parts(640, 0).saturating_mul(n.into()))
			// Standard Error: 144
			.saturating_add(Weight::from_parts(1_805, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `257 + n * (1 ±0)`
		//  Estimated: `256 + n * (1 ±0)`
		// Minimum execution time: 18_433_000 picoseconds.
		Weight::from_parts(21_322_046, 0)
			.saturating_add(Weight::from_parts(0, 256))
			// Standard Error: 250
			.saturating_add(Weight::from_parts(1_257, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 10_635_000 picoseconds.
		Weight::from_parts(11_974_001, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 109
			.saturating_add(Weight::from_parts(2_120, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 9_973_000 picoseconds.
		Weight::from_parts(11_391_017, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 101
			.saturating_add(Weight::from_parts(852, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `257 + n * (1 ±0)`
		//  Estimated: `256 + n * (1 ±0)`
		// Minimum execution time: 19_159_000 picoseconds.
		Weight::from_parts(21_748_994, 0)
			.saturating_add(Weight::from_parts(0, 256))
			// Standard Error: 220
			.saturating_add(Weight::from_parts(3_502, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_880_000 picoseconds.
		Weight::from_parts(3_146_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_218_000 picoseconds.
		Weight::from_parts(3_491_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_750_000 picoseconds.
		Weight::from_parts(3_065_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_076_000 picoseconds.
		Weight::from_parts(3_246_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_464_000 picoseconds.
		Weight::from_parts(2_838_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_726_000 picoseconds.
		Weight::from_parts(3_990_200, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 31
			.saturating_add(Weight::from_parts(490, 0).saturating_mul(n.into()))
			// Standard Error: 31
			.saturating_add(Weight::from_parts(568, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_527_000 picoseconds.
		Weight::from_parts(4_071_304, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(432, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_280_000 picoseconds.
		Weight::from_parts(3_668_817, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 36
			.saturating_add(Weight::from_parts(612, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_117_000 picoseconds.
		Weight::from_parts(3_507_771, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 31
			.saturating_add(Weight::from_parts(160, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_010_000 picoseconds.
		Weight::from_parts(4_485_525, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 36
			.saturating_add(Weight::from_parts(110, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3547`
		//  Estimated: `7012`
		// Minimum execution time: 107_208_000 picoseconds.
		Weight::from_parts(91_039_230, 0)
			.saturating_add(Weight::from_parts(0, 7012))
			// Standard Error: 172_512
			.saturating_add(Weight::from_parts(19_593_941, 0).saturating_mul(t.into()))
			// Standard Error: 172_512
			.saturating_add(Weight::from_parts(27_299_900, 0).saturating_mul(d.into()))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(5, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `399 + d * (1417 ±0)`
		//  Estimated: `2641 + d * (2640 ±0)`
		// Minimum execution time: 35_287_000 picoseconds.
		Weight::from_parts(17_493_155, 0)
			.saturating_add(Weight::from_parts(0, 2641))
			// Standard Error: 83_090
			.saturating_add(Weight::from_parts(20_865_840, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(330, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2640).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1426`
		//  Estimated: `4891`
		// Minimum execution time: 40_042_000 picoseconds.
		Weight::from_parts(42_620_000, 0)
			.saturating_add(Weight::from_parts(0, 4891))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3799`
		//  Estimated: `7364`
		// Minimum execution time: 177_682_000 picoseconds.
		Weight::from_parts(121_092_589, 0)
			.saturating_add(Weight::from_parts(0, 7364))
			// Standard Error: 1_273_684
			.saturating_add(Weight::from_parts(18_839_753, 0).saturating_mul(t.into()))
			// Standard Error: 1_273_684
			.saturating_add(Weight::from_parts(34_457_827, 0).saturating_mul(d.into()))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(4_117, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_501_000 picoseconds.
		Weight::from_parts(10_092_411, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(1_268, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_105_000 picoseconds.
		Weight::from_parts(2_466_367, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(114, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_484_000 picoseconds.
		Weight::from_parts(2_425_073, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_783, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_239_000 picoseconds.
		Weight::from_parts(7_596_555, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(3_587, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_850_000 picoseconds.
		Weight::from_parts(9_455_268, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(1_435, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_821_000 picoseconds.
		Weight::from_parts(7_900_239, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(1_517, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 45_072_000 picoseconds.
		Weight::from_parts(36_799_946, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 10
			.saturating_add(Weight::from_parts(5_287, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 48_116_000 picoseconds.
		Weight::from_parts(49_100_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 16_367_000 picoseconds.
		Weight::from_parts(17_787_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 995_355_000 picoseconds.
		Weight::from_parts(1_006_204_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_011_000 picoseconds.
		Weight::from_parts(5_000_420_176, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 10_599_801
			.saturating_add(Weight::from_parts(6_052_500_664, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_188_000 picoseconds.
		Weight::from_parts(2_585_440, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(29_024, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_709_000 picoseconds.
		Weight::from_parts(14_996_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `360`
		//  Estimated: `3825`
		// Minimum execution time: 14_494_000 picoseconds.
		Weight::from_parts(15_165_000, 0)
			.saturating_add(Weight::from_parts(0, 3825))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 15_744_000 picoseconds.
		Weight::from_parts(53_953_755, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 890
			.saturating_add(Weight::from_parts(133_435, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_597_000 picoseconds.
		Weight::from_parts(26_940_972, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 146
			.saturating_add(Weight::from_parts(71_531, 0).saturating_mul(r.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6288`
		// Minimum execution time: 17_134_000 picoseconds.
		Weight::from_parts(17_901_000, 0)
			.saturating_add(Weight::from_parts(0, 6288))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
